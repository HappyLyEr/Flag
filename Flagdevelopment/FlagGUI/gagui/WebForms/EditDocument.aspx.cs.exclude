using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using GASystem.DataModel;
using GASystem.BusinessLayer;

namespace GASystem
{
	/// <summary>
	/// Summary description for EditDocument.
	/// </summary>
	public class EditDocument : System.Web.UI.Page
	{
		protected System.Web.UI.WebControls.Panel pnlRichTextBox;
		protected System.Web.UI.WebControls.Label Label2;
		protected System.Web.UI.WebControls.Label Label4;
		protected System.Web.UI.WebControls.DropDownList ddlInternalPage;
		protected System.Web.UI.WebControls.Label Label5;
		protected System.Web.UI.WebControls.TextBox txtInternalLink;
		protected System.Web.UI.WebControls.Button btnSave;
		protected System.Web.UI.WebControls.Button btnCancel;
		protected FreeTextBoxControls.FreeTextBox ftbDesktopText;

		private int _documentId = 0;
		private int _documentGroupId = 0;
	
		private void Page_Load(object sender, System.EventArgs e)
		{
			if (null!=Request["DocumentId"])
				_documentId = int.Parse(Request["DocumentId"]);
			if (null!=Request["DocumentGroupId"])
				_documentGroupId = int.Parse(Request["DocumentGroupId"]);
			
			
			if (!Page.IsPostBack)
				renderEditForm();
		
		}

		private void renderEditForm()
		{
			
			
			//Define toolbar.
			//Check http://www.revjon.com/ftb/docs/FreeTextBoxControls.FreeTextBox.ToolbarLayout.html
			//for details in toolbars
			ftbDesktopText.ToolbarLayout = "Cut, Copy, Paste ;Undo, Redo, Save|";
			ftbDesktopText.ToolbarLayout += "JustifyLeft, JustifyRight, JustifyCenter, JustifyFull;BulletedList, NumberedList, Indent, Outdent|";
			ftbDesktopText.ToolbarLayout += "bold,italic,underline;FontForeColorPicker;InsertImageFromGallery, CreateLink, Unlink, RemoveFormat, WordClean|";
			ftbDesktopText.ToolbarLayout += "StyleMenu, SymbolsMenu|FontFacesMenu, FontSizesMenu|";
			ftbDesktopText.ToolbarLayout += "InsertTable, ieSpellCheck, InsertRule, InsertDate, InsertTime, WordCount";
		
			ftbDesktopText.StyleMenuTitle = "Velg Stil";
			ftbDesktopText.StyleMenuNames = 
				new string[] {"Normal Tekst","Normal Uthevet", "Liten Tekst", "Stor Overskrift","Liten Overskrift"}; 
			ftbDesktopText.StyleMenuList = 
				new string[] {"NormalText","NormalTextBold", "SmallText", "TextHeading","SmallHeading"}; 
			
			DocumentDS docDs = new DocumentDS();

			if (_documentId>0)
				docDs = Document.GetDocument(_documentId);
			else if (_documentGroupId>0)
				docDs = Document.GetNewDocument(_documentGroupId);

			DocumentDataSet = docDs;
			

			//ftbDesktopText.Text =  docDs.Document[0].Content;

			//Populate internal page ddl
		/*	PageDb pagedb = new PageDb();
			ddlInternalPage.DataSource = pagedb.getAllPages();
			ddlInternalPage.DataTextField = "PageName";
			ddlInternalPage.DataValueField = "PageId";
			ddlInternalPage.DataBind();*/
		}



		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{    
			this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
			this.Load += new System.EventHandler(this.Page_Load);

		}
		#endregion

		private void btnSave_Click(object sender, System.EventArgs e)
		{
		
		}
	

		//Provide a way to store the dataset in viewState
		protected DocumentDS DocumentDataSet
		{
			get
			{
				return null==ViewState["DocumentDataSet"] ? null : (DocumentDS) ViewState["DocumentDataSet"];
			}
			set
			{
				ViewState["DocumentDataSet"] = value;
			}
		}
	}
}
