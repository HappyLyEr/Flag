///////////////////////////////////////////////////////////
//  ReportUtils.cs
//  Implementation of the Class ReportUtils
//  Generated by Enterprise Architect
//  Created on:      02-okt-2006 15:55:26
///////////////////////////////////////////////////////////




using GASystem.BusinessLayer.FlagReport;
namespace GASystem.BusinessLayer.FlagReport {
	public class ReportUtils {

		public ReportUtils(){

		}

		
		/// <summary>
		/// Get MimeType for a given Document Type
		/// </summary>
		/// <param name="DocType"></param>
		public static string getMimeType(DocumentType DocType){
			
			switch (DocType) 
			{
				case DocumentType.PDF:
					return "application/pdf";
				case DocumentType.Excel:
					return "application/vnd.ms-excel";
				case DocumentType.MSWord:
					return "application/msword";
                case DocumentType.HTML:
                    return "text/html";
				default: 
					return "text/html";
			}
		}

		/// <summary>
		/// Get extension for a given Document Type
		/// </summary>
		/// <param name="DocType"></param>
		public static string getFileExtension(DocumentType DocType)
		{
			
			switch (DocType) 
			{
				case DocumentType.PDF:
					return "pdf";
				case DocumentType.Excel:
					return "xsl";
				case DocumentType.MSWord:
					return "doc";
                case DocumentType.HTML:
                    return "html";
				default: 
					return "html";
			}
		}

		/// <summary>
		/// Get crystal documeten type for a Document Type
		/// </summary>
		/// <param name="DocType"></param>
		public static CrystalDecisions.Shared.ExportFormatType getCrystalExportFormatType(DocumentType DocType)
		{
			
			switch (DocType) 
			{
				case DocumentType.PDF:
					return CrystalDecisions.Shared.ExportFormatType.PortableDocFormat;
				case DocumentType.Excel:
					return CrystalDecisions.Shared.ExportFormatType.Excel;
				case DocumentType.MSWord:
					return CrystalDecisions.Shared.ExportFormatType.WordForWindows;
				default: 
					return CrystalDecisions.Shared.ExportFormatType.HTML32;
			}
		}



		public static ReportDescripton GetReportDescription(int ReportInstanceId, GASystem.DataModel.GADataClass DataClass) 
		{
			//special case. report is of single record type
			if (ReportInstanceId == 0) 
			{
				return getReportDescriptionForSingelClassRecord(DataClass);
			}
			return getReportDescriptionFromDB(ReportInstanceId);
		}


		/// <summary>
		/// Generate a dummy report description for use by reports where reportid = 0. This is single record reports
		/// </summary>
		/// <returns></returns>
		private static ReportDescripton getReportDescriptionForSingelClassRecord(GASystem.DataModel.GADataClass DataClass) 
		{
			
			//get report defs.
			GASystem.DataModel.ReportsDS rds = Reports.GetSingleClassReportsByClassName(DataClass.ToString());
			ReportDescripton rd = new ReportDescripton();

			if (rds.GAReports.Rows.Count > 0) 
			{
				//defintion for report is found in gareports
				rd.Name = rds.GAReports[0].IsNameNull() ? "" : rds.GAReports[0].Name;
				rd.ReportType = rds.GAReports[0].IsTextFree1Null() ? ReportTypeEnum.CrystalReportSingle : (ReportTypeEnum)System.Enum.Parse(typeof(ReportTypeEnum), rds.GAReports[0].TextFree1, true);
				rd.Description = rds.GAReports[0].IsReportDescriptionNull() ? "" : rds.GAReports[0].ReportDescription;
				rd.TemplateFile = rds.GAReports[0].IsReportFileNull() ? "" : rds.GAReports[0].ReportFile;
				rd.ReportId = rds.GAReports[0].ReportsRowId;
				rd.ReportInstanceId = 0;
                rd.DocumentType = rds.GAReports[0].IsIntFree1Null() ? DocumentType.PDF : (DocumentType)System.Enum.Parse(typeof(DocumentType), GASystem.BusinessLayer.Lists.GetListValueByRowId(rds.GAReports[0].IntFree1, null), true);
			}
			else 
			{
				//definition is missing default to a crystal single record
				rd.Name = "SingleRecordReport";
				rd.ReportType = ReportTypeEnum.CrystalReportSingle;
				rd.Description = string.Empty;
				rd.TemplateFile = string.Empty;
				rd.ReportId = 0;
				rd.ReportInstanceId = 0;
				rd.DocumentType = DocumentType.PDF;
			}
							 
			return rd;
		}

		/// <summary>
		/// Generate description from database definitions
		/// </summary>
		/// <returns></returns>
		private static ReportDescripton getReportDescriptionFromDB(int ReportInstanceId) 
		{

			//get report defs.
			GASystem.DataModel.ReportsDS rds = Reports.GetReportsByInstanceId(ReportInstanceId);
			GASystem.DataModel.ReportInstanceDS ids = ReportInstance.GetReportInstanceByReportInstanceRowId(ReportInstanceId);


			
			ReportDescripton rd = new ReportDescripton();
			rd.Name = rds.GAReports[0].IsNameNull() ? "" : rds.GAReports[0].Name;
			rd.ReportType = rds.GAReports[0].IsTextFree1Null() ? ReportTypeEnum.CrystalReportSingle : (ReportTypeEnum)System.Enum.Parse(typeof(ReportTypeEnum), rds.GAReports[0].TextFree1, true);
			rd.Description = rds.GAReports[0].IsReportDescriptionNull() ? "" : rds.GAReports[0].ReportDescription;
			rd.TemplateFile = rds.GAReports[0].IsReportFileNull() ? "" : rds.GAReports[0].ReportFile;
			rd.ReportId = rds.GAReports[0].ReportsRowId;
			rd.ReportInstanceId = ReportInstanceId;
            rd.DocumentType = ids.GAReportInstance[0].IsReportDocumentTypeNull() ? DocumentType.PDF : (DocumentType)System.Enum.Parse(typeof(DocumentType), GASystem.BusinessLayer.Lists.GetListValueByRowId(ids.GAReportInstance[0].ReportDocumentType, null), true);
							 
			return rd;
		}


		/// <summary>
		/// Returns path to a repository holding all report definitions. TODO: replace with web.config folder
		/// </summary>
		public static string CrystalFormsRepository 
		{
			get {return System.Web.HttpContext.Current.Server.MapPath("~/gagui/Reports/CrystalForms/");}
		}

		/// <summary>
		/// Returns path to a repository holding all report definitions. TODO: replace with web.config folder
		/// </summary>
		public static string ActiveFormsRepository 
		{
			get {return System.Web.HttpContext.Current.Server.MapPath("~/gagui/Reports/ActiveForms/");}
		}
		

	}//end ReportUtils

}//end namespace FlagReport


