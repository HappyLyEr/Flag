//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace GASystem.DataModel {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ClassRoleAccessDS : DataSet {
        
        private GAClassRoleAccessDataTable tableGAClassRoleAccess;
        
        public ClassRoleAccessDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ClassRoleAccessDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GAClassRoleAccess"] != null)) {
                    this.Tables.Add(new GAClassRoleAccessDataTable(ds.Tables["GAClassRoleAccess"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GAClassRoleAccessDataTable GAClassRoleAccess {
            get {
                return this.tableGAClassRoleAccess;
            }
        }
        
        public override DataSet Clone() {
            ClassRoleAccessDS cln = ((ClassRoleAccessDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GAClassRoleAccess"] != null)) {
                this.Tables.Add(new GAClassRoleAccessDataTable(ds.Tables["GAClassRoleAccess"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableGAClassRoleAccess = ((GAClassRoleAccessDataTable)(this.Tables["GAClassRoleAccess"]));
            if ((this.tableGAClassRoleAccess != null)) {
                this.tableGAClassRoleAccess.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ClassRoleAccessDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ClassRoleAccessDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableGAClassRoleAccess = new GAClassRoleAccessDataTable();
            this.Tables.Add(this.tableGAClassRoleAccess);
        }
        
        private bool ShouldSerializeGAClassRoleAccess() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void GAClassRoleAccessRowChangeEventHandler(object sender, GAClassRoleAccessRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GAClassRoleAccessDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClassRowId;
            
            private DataColumn columnClass;
            
            private DataColumn columnReadRoles;
            
            private DataColumn columnUpdateRoles;
            
            private DataColumn columnCreateRoles;
            
            private DataColumn columnDeleteRoles;
            
            internal GAClassRoleAccessDataTable() : 
                    base("GAClassRoleAccess") {
                this.InitClass();
            }
            
            internal GAClassRoleAccessDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClassRowIdColumn {
                get {
                    return this.columnClassRowId;
                }
            }
            
            internal DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            internal DataColumn ReadRolesColumn {
                get {
                    return this.columnReadRoles;
                }
            }
            
            internal DataColumn UpdateRolesColumn {
                get {
                    return this.columnUpdateRoles;
                }
            }
            
            internal DataColumn CreateRolesColumn {
                get {
                    return this.columnCreateRoles;
                }
            }
            
            internal DataColumn DeleteRolesColumn {
                get {
                    return this.columnDeleteRoles;
                }
            }
            
            public GAClassRoleAccessRow this[int index] {
                get {
                    return ((GAClassRoleAccessRow)(this.Rows[index]));
                }
            }
            
            public event GAClassRoleAccessRowChangeEventHandler GAClassRoleAccessRowChanged;
            
            public event GAClassRoleAccessRowChangeEventHandler GAClassRoleAccessRowChanging;
            
            public event GAClassRoleAccessRowChangeEventHandler GAClassRoleAccessRowDeleted;
            
            public event GAClassRoleAccessRowChangeEventHandler GAClassRoleAccessRowDeleting;
            
            public void AddGAClassRoleAccessRow(GAClassRoleAccessRow row) {
                this.Rows.Add(row);
            }
            
            public GAClassRoleAccessRow AddGAClassRoleAccessRow(string Class, string ReadRoles, string UpdateRoles, string CreateRoles, string DeleteRoles) {
                GAClassRoleAccessRow rowGAClassRoleAccessRow = ((GAClassRoleAccessRow)(this.NewRow()));
                rowGAClassRoleAccessRow.ItemArray = new object[] {
                        null,
                        Class,
                        ReadRoles,
                        UpdateRoles,
                        CreateRoles,
                        DeleteRoles};
                this.Rows.Add(rowGAClassRoleAccessRow);
                return rowGAClassRoleAccessRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                GAClassRoleAccessDataTable cln = ((GAClassRoleAccessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new GAClassRoleAccessDataTable();
            }
            
            internal void InitVars() {
                this.columnClassRowId = this.Columns["ClassRowId"];
                this.columnClass = this.Columns["Class"];
                this.columnReadRoles = this.Columns["ReadRoles"];
                this.columnUpdateRoles = this.Columns["UpdateRoles"];
                this.columnCreateRoles = this.Columns["CreateRoles"];
                this.columnDeleteRoles = this.Columns["DeleteRoles"];
            }
            
            private void InitClass() {
                this.columnClassRowId = new DataColumn("ClassRowId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassRowId);
                this.columnClass = new DataColumn("Class", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClass);
                this.columnReadRoles = new DataColumn("ReadRoles", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReadRoles);
                this.columnUpdateRoles = new DataColumn("UpdateRoles", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUpdateRoles);
                this.columnCreateRoles = new DataColumn("CreateRoles", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCreateRoles);
                this.columnDeleteRoles = new DataColumn("DeleteRoles", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDeleteRoles);
                this.columnClassRowId.AutoIncrement = true;
                this.columnClassRowId.AllowDBNull = false;
                this.columnClassRowId.ReadOnly = true;
            }
            
            public GAClassRoleAccessRow NewGAClassRoleAccessRow() {
                return ((GAClassRoleAccessRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new GAClassRoleAccessRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GAClassRoleAccessRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GAClassRoleAccessRowChanged != null)) {
                    this.GAClassRoleAccessRowChanged(this, new GAClassRoleAccessRowChangeEvent(((GAClassRoleAccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GAClassRoleAccessRowChanging != null)) {
                    this.GAClassRoleAccessRowChanging(this, new GAClassRoleAccessRowChangeEvent(((GAClassRoleAccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GAClassRoleAccessRowDeleted != null)) {
                    this.GAClassRoleAccessRowDeleted(this, new GAClassRoleAccessRowChangeEvent(((GAClassRoleAccessRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GAClassRoleAccessRowDeleting != null)) {
                    this.GAClassRoleAccessRowDeleting(this, new GAClassRoleAccessRowChangeEvent(((GAClassRoleAccessRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGAClassRoleAccessRow(GAClassRoleAccessRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GAClassRoleAccessRow : DataRow {
            
            private GAClassRoleAccessDataTable tableGAClassRoleAccess;
            
            internal GAClassRoleAccessRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableGAClassRoleAccess = ((GAClassRoleAccessDataTable)(this.Table));
            }
            
            public int ClassRowId {
                get {
                    return ((int)(this[this.tableGAClassRoleAccess.ClassRowIdColumn]));
                }
                set {
                    this[this.tableGAClassRoleAccess.ClassRowIdColumn] = value;
                }
            }
            
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableGAClassRoleAccess.ClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAClassRoleAccess.ClassColumn] = value;
                }
            }
            
            public string ReadRoles {
                get {
                    try {
                        return ((string)(this[this.tableGAClassRoleAccess.ReadRolesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAClassRoleAccess.ReadRolesColumn] = value;
                }
            }
            
            public string UpdateRoles {
                get {
                    try {
                        return ((string)(this[this.tableGAClassRoleAccess.UpdateRolesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAClassRoleAccess.UpdateRolesColumn] = value;
                }
            }
            
            public string CreateRoles {
                get {
                    try {
                        return ((string)(this[this.tableGAClassRoleAccess.CreateRolesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAClassRoleAccess.CreateRolesColumn] = value;
                }
            }
            
            public string DeleteRoles {
                get {
                    try {
                        return ((string)(this[this.tableGAClassRoleAccess.DeleteRolesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAClassRoleAccess.DeleteRolesColumn] = value;
                }
            }
            
            public bool IsClassNull() {
                return this.IsNull(this.tableGAClassRoleAccess.ClassColumn);
            }
            
            public void SetClassNull() {
                this[this.tableGAClassRoleAccess.ClassColumn] = System.Convert.DBNull;
            }
            
            public bool IsReadRolesNull() {
                return this.IsNull(this.tableGAClassRoleAccess.ReadRolesColumn);
            }
            
            public void SetReadRolesNull() {
                this[this.tableGAClassRoleAccess.ReadRolesColumn] = System.Convert.DBNull;
            }
            
            public bool IsUpdateRolesNull() {
                return this.IsNull(this.tableGAClassRoleAccess.UpdateRolesColumn);
            }
            
            public void SetUpdateRolesNull() {
                this[this.tableGAClassRoleAccess.UpdateRolesColumn] = System.Convert.DBNull;
            }
            
            public bool IsCreateRolesNull() {
                return this.IsNull(this.tableGAClassRoleAccess.CreateRolesColumn);
            }
            
            public void SetCreateRolesNull() {
                this[this.tableGAClassRoleAccess.CreateRolesColumn] = System.Convert.DBNull;
            }
            
            public bool IsDeleteRolesNull() {
                return this.IsNull(this.tableGAClassRoleAccess.DeleteRolesColumn);
            }
            
            public void SetDeleteRolesNull() {
                this[this.tableGAClassRoleAccess.DeleteRolesColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GAClassRoleAccessRowChangeEvent : EventArgs {
            
            private GAClassRoleAccessRow eventRow;
            
            private DataRowAction eventAction;
            
            public GAClassRoleAccessRowChangeEvent(GAClassRoleAccessRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GAClassRoleAccessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
