//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GASystem.DataModel {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataRecordRolePermissionsDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataRecordRolePermissionsDS : System.Data.DataSet {
        
        private DataRecordRolePermissionsDataTable tableDataRecordRolePermissions;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataRecordRolePermissionsDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataRecordRolePermissionsDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataRecordRolePermissions"] != null)) {
                    base.Tables.Add(new DataRecordRolePermissionsDataTable(ds.Tables["DataRecordRolePermissions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataRecordRolePermissionsDataTable DataRecordRolePermissions {
            get {
                return this.tableDataRecordRolePermissions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataRecordRolePermissionsDS cln = ((DataRecordRolePermissionsDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataRecordRolePermissions"] != null)) {
                    base.Tables.Add(new DataRecordRolePermissionsDataTable(ds.Tables["DataRecordRolePermissions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataRecordRolePermissions = ((DataRecordRolePermissionsDataTable)(base.Tables["DataRecordRolePermissions"]));
            if ((initTable == true)) {
                if ((this.tableDataRecordRolePermissions != null)) {
                    this.tableDataRecordRolePermissions.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataRecordRolePermissionsDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataRecordRoleAccessDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataRecordRolePermissions = new DataRecordRolePermissionsDataTable();
            base.Tables.Add(this.tableDataRecordRolePermissions);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataRecordRolePermissions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataRecordRolePermissionsDS ds = new DataRecordRolePermissionsDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DataRecordRolePermissionsRowChangeEventHandler(object sender, DataRecordRolePermissionsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataRecordRolePermissionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRoleName;
            
            private System.Data.DataColumn columnRoleId;
            
            private System.Data.DataColumn columnHasRead;
            
            private System.Data.DataColumn columnHasUpdate;
            
            private System.Data.DataColumn columnHasCreate;
            
            private System.Data.DataColumn columnHasDelete;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsDataTable() {
                this.TableName = "DataRecordRolePermissions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataRecordRolePermissionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataRecordRolePermissionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleNameColumn {
                get {
                    return this.columnRoleName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleIdColumn {
                get {
                    return this.columnRoleId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasReadColumn {
                get {
                    return this.columnHasRead;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasUpdateColumn {
                get {
                    return this.columnHasUpdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasCreateColumn {
                get {
                    return this.columnHasCreate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HasDeleteColumn {
                get {
                    return this.columnHasDelete;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRow this[int index] {
                get {
                    return ((DataRecordRolePermissionsRow)(this.Rows[index]));
                }
            }
            
            public event DataRecordRolePermissionsRowChangeEventHandler DataRecordRolePermissionsRowChanging;
            
            public event DataRecordRolePermissionsRowChangeEventHandler DataRecordRolePermissionsRowChanged;
            
            public event DataRecordRolePermissionsRowChangeEventHandler DataRecordRolePermissionsRowDeleting;
            
            public event DataRecordRolePermissionsRowChangeEventHandler DataRecordRolePermissionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataRecordRolePermissionsRow(DataRecordRolePermissionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRow AddDataRecordRolePermissionsRow(string RoleName, string RoleId, bool HasRead, bool HasUpdate, bool HasCreate, bool HasDelete) {
                DataRecordRolePermissionsRow rowDataRecordRolePermissionsRow = ((DataRecordRolePermissionsRow)(this.NewRow()));
                rowDataRecordRolePermissionsRow.ItemArray = new object[] {
                        RoleName,
                        RoleId,
                        HasRead,
                        HasUpdate,
                        HasCreate,
                        HasDelete};
                this.Rows.Add(rowDataRecordRolePermissionsRow);
                return rowDataRecordRolePermissionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRow FindByRoleId(string RoleId) {
                return ((DataRecordRolePermissionsRow)(this.Rows.Find(new object[] {
                            RoleId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataRecordRolePermissionsDataTable cln = ((DataRecordRolePermissionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataRecordRolePermissionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRoleName = base.Columns["RoleName"];
                this.columnRoleId = base.Columns["RoleId"];
                this.columnHasRead = base.Columns["HasRead"];
                this.columnHasUpdate = base.Columns["HasUpdate"];
                this.columnHasCreate = base.Columns["HasCreate"];
                this.columnHasDelete = base.Columns["HasDelete"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRoleName = new System.Data.DataColumn("RoleName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoleName);
                this.columnRoleId = new System.Data.DataColumn("RoleId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoleId);
                this.columnHasRead = new System.Data.DataColumn("HasRead", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasRead);
                this.columnHasUpdate = new System.Data.DataColumn("HasUpdate", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasUpdate);
                this.columnHasCreate = new System.Data.DataColumn("HasCreate", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasCreate);
                this.columnHasDelete = new System.Data.DataColumn("HasDelete", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasDelete);
                this.Constraints.Add(new System.Data.UniqueConstraint("DataRecordRoleAccessDSKey1", new System.Data.DataColumn[] {
                                this.columnRoleId}, true));
                this.columnRoleId.AllowDBNull = false;
                this.columnRoleId.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRow NewDataRecordRolePermissionsRow() {
                return ((DataRecordRolePermissionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataRecordRolePermissionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataRecordRolePermissionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataRecordRolePermissionsRowChanged != null)) {
                    this.DataRecordRolePermissionsRowChanged(this, new DataRecordRolePermissionsRowChangeEvent(((DataRecordRolePermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataRecordRolePermissionsRowChanging != null)) {
                    this.DataRecordRolePermissionsRowChanging(this, new DataRecordRolePermissionsRowChangeEvent(((DataRecordRolePermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataRecordRolePermissionsRowDeleted != null)) {
                    this.DataRecordRolePermissionsRowDeleted(this, new DataRecordRolePermissionsRowChangeEvent(((DataRecordRolePermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataRecordRolePermissionsRowDeleting != null)) {
                    this.DataRecordRolePermissionsRowDeleting(this, new DataRecordRolePermissionsRowChangeEvent(((DataRecordRolePermissionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataRecordRolePermissionsRow(DataRecordRolePermissionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataRecordRolePermissionsDS ds = new DataRecordRolePermissionsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataRecordRolePermissionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataRecordRolePermissionsRow : System.Data.DataRow {
            
            private DataRecordRolePermissionsDataTable tableDataRecordRolePermissions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataRecordRolePermissionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataRecordRolePermissions = ((DataRecordRolePermissionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoleName {
                get {
                    try {
                        return ((string)(this[this.tableDataRecordRolePermissions.RoleNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RoleName\' in table \'DataRecordRolePermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataRecordRolePermissions.RoleNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoleId {
                get {
                    return ((string)(this[this.tableDataRecordRolePermissions.RoleIdColumn]));
                }
                set {
                    this[this.tableDataRecordRolePermissions.RoleIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasRead {
                get {
                    try {
                        return ((bool)(this[this.tableDataRecordRolePermissions.HasReadColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasRead\' in table \'DataRecordRolePermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataRecordRolePermissions.HasReadColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasUpdate {
                get {
                    try {
                        return ((bool)(this[this.tableDataRecordRolePermissions.HasUpdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasUpdate\' in table \'DataRecordRolePermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataRecordRolePermissions.HasUpdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasCreate {
                get {
                    try {
                        return ((bool)(this[this.tableDataRecordRolePermissions.HasCreateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasCreate\' in table \'DataRecordRolePermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataRecordRolePermissions.HasCreateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasDelete {
                get {
                    try {
                        return ((bool)(this[this.tableDataRecordRolePermissions.HasDeleteColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'HasDelete\' in table \'DataRecordRolePermissions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataRecordRolePermissions.HasDeleteColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoleNameNull() {
                return this.IsNull(this.tableDataRecordRolePermissions.RoleNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoleNameNull() {
                this[this.tableDataRecordRolePermissions.RoleNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasReadNull() {
                return this.IsNull(this.tableDataRecordRolePermissions.HasReadColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasReadNull() {
                this[this.tableDataRecordRolePermissions.HasReadColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasUpdateNull() {
                return this.IsNull(this.tableDataRecordRolePermissions.HasUpdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasUpdateNull() {
                this[this.tableDataRecordRolePermissions.HasUpdateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasCreateNull() {
                return this.IsNull(this.tableDataRecordRolePermissions.HasCreateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasCreateNull() {
                this[this.tableDataRecordRolePermissions.HasCreateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasDeleteNull() {
                return this.IsNull(this.tableDataRecordRolePermissions.HasDeleteColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasDeleteNull() {
                this[this.tableDataRecordRolePermissions.HasDeleteColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataRecordRolePermissionsRowChangeEvent : System.EventArgs {
            
            private DataRecordRolePermissionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRowChangeEvent(DataRecordRolePermissionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataRecordRolePermissionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591