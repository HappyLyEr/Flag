//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GASystem.DataModel {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("RepairIssueViewDS")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RepairIssueViewDS : System.Data.DataSet {
        
        private GARepairIssueViewDataTable tableGARepairIssueView;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepairIssueViewDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RepairIssueViewDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GARepairIssueView"] != null)) {
                    base.Tables.Add(new GARepairIssueViewDataTable(ds.Tables["GARepairIssueView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GARepairIssueViewDataTable GARepairIssueView {
            get {
                return this.tableGARepairIssueView;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            RepairIssueViewDS cln = ((RepairIssueViewDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GARepairIssueView"] != null)) {
                    base.Tables.Add(new GARepairIssueViewDataTable(ds.Tables["GARepairIssueView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGARepairIssueView = ((GARepairIssueViewDataTable)(base.Tables["GARepairIssueView"]));
            if ((initTable == true)) {
                if ((this.tableGARepairIssueView != null)) {
                    this.tableGARepairIssueView.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RepairIssueViewDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RepairIssueViewDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGARepairIssueView = new GARepairIssueViewDataTable();
            base.Tables.Add(this.tableGARepairIssueView);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGARepairIssueView() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            RepairIssueViewDS ds = new RepairIssueViewDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void GARepairIssueViewRowChangeEventHandler(object sender, GARepairIssueViewRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GARepairIssueViewDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnRepairIssueViewRowId;
            
            private System.Data.DataColumn columnRepairIssueViewReferenceId;
            
            private System.Data.DataColumn columnEquipmentId;
            
            private System.Data.DataColumn columnRequestedBy;
            
            private System.Data.DataColumn columnDateOfFailure;
            
            private System.Data.DataColumn columnRepairsNeeded;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnResponsible;
            
            private System.Data.DataColumn columnResponsibleRoleListsRowId;
            
            private System.Data.DataColumn columnDateRepairCompleted;
            
            private System.Data.DataColumn columnLessonsLearned;
            
            private System.Data.DataColumn columnnTextFree2;
            
            private System.Data.DataColumn columnnTextFree3;
            
            private System.Data.DataColumn columnTypeOfEquipment;
            
            private System.Data.DataColumn columnTypeOfIssue;
            
            private System.Data.DataColumn columnIntFree3;
            
            private System.Data.DataColumn columnDateRepairBy;
            
            private System.Data.DataColumn columnDatePlannedRepair;
            
            private System.Data.DataColumn columnEquipmentSupplier;
            
            private System.Data.DataColumn columnRepairedBy;
            
            private System.Data.DataColumn columnTextFree3;
            
            private System.Data.DataColumn columnSwitchFree1;
            
            private System.Data.DataColumn columnSwitchFree2;
            
            private System.Data.DataColumn columnSwitchFree3;
            
            private System.Data.DataColumn columnDateRepairOrdered;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewDataTable() {
                this.TableName = "GARepairIssueView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GARepairIssueViewDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GARepairIssueViewDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepairIssueViewRowIdColumn {
                get {
                    return this.columnRepairIssueViewRowId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepairIssueViewReferenceIdColumn {
                get {
                    return this.columnRepairIssueViewReferenceId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EquipmentIdColumn {
                get {
                    return this.columnEquipmentId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RequestedByColumn {
                get {
                    return this.columnRequestedBy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfFailureColumn {
                get {
                    return this.columnDateOfFailure;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepairsNeededColumn {
                get {
                    return this.columnRepairsNeeded;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponsibleColumn {
                get {
                    return this.columnResponsible;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ResponsibleRoleListsRowIdColumn {
                get {
                    return this.columnResponsibleRoleListsRowId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateRepairCompletedColumn {
                get {
                    return this.columnDateRepairCompleted;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LessonsLearnedColumn {
                get {
                    return this.columnLessonsLearned;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nTextFree2Column {
                get {
                    return this.columnnTextFree2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nTextFree3Column {
                get {
                    return this.columnnTextFree3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeOfEquipmentColumn {
                get {
                    return this.columnTypeOfEquipment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeOfIssueColumn {
                get {
                    return this.columnTypeOfIssue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IntFree3Column {
                get {
                    return this.columnIntFree3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateRepairByColumn {
                get {
                    return this.columnDateRepairBy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DatePlannedRepairColumn {
                get {
                    return this.columnDatePlannedRepair;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EquipmentSupplierColumn {
                get {
                    return this.columnEquipmentSupplier;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RepairedByColumn {
                get {
                    return this.columnRepairedBy;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TextFree3Column {
                get {
                    return this.columnTextFree3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SwitchFree1Column {
                get {
                    return this.columnSwitchFree1;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SwitchFree2Column {
                get {
                    return this.columnSwitchFree2;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SwitchFree3Column {
                get {
                    return this.columnSwitchFree3;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateRepairOrderedColumn {
                get {
                    return this.columnDateRepairOrdered;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow this[int index] {
                get {
                    return ((GARepairIssueViewRow)(this.Rows[index]));
                }
            }
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowChanging;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowChanged;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowDeleting;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGARepairIssueViewRow(GARepairIssueViewRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow AddGARepairIssueViewRow(
                        string RepairIssueViewReferenceId, 
                        string EquipmentId, 
                        int RequestedBy, 
                        System.DateTime DateOfFailure, 
                        string RepairsNeeded, 
                        int Status, 
                        int Responsible, 
                        int ResponsibleRoleListsRowId, 
                        System.DateTime DateRepairCompleted, 
                        string LessonsLearned, 
                        string nTextFree2, 
                        string nTextFree3, 
                        int TypeOfEquipment, 
                        int TypeOfIssue, 
                        int IntFree3, 
                        System.DateTime DateRepairBy, 
                        System.DateTime DatePlannedRepair, 
                        string EquipmentSupplier, 
                        string RepairedBy, 
                        string TextFree3, 
                        bool SwitchFree1, 
                        bool SwitchFree2, 
                        bool SwitchFree3, 
                        System.DateTime DateRepairOrdered) {
                GARepairIssueViewRow rowGARepairIssueViewRow = ((GARepairIssueViewRow)(this.NewRow()));
                rowGARepairIssueViewRow.ItemArray = new object[] {
                        null,
                        RepairIssueViewReferenceId,
                        EquipmentId,
                        RequestedBy,
                        DateOfFailure,
                        RepairsNeeded,
                        Status,
                        Responsible,
                        ResponsibleRoleListsRowId,
                        DateRepairCompleted,
                        LessonsLearned,
                        nTextFree2,
                        nTextFree3,
                        TypeOfEquipment,
                        TypeOfIssue,
                        IntFree3,
                        DateRepairBy,
                        DatePlannedRepair,
                        EquipmentSupplier,
                        RepairedBy,
                        TextFree3,
                        SwitchFree1,
                        SwitchFree2,
                        SwitchFree3,
                        DateRepairOrdered};
                this.Rows.Add(rowGARepairIssueViewRow);
                return rowGARepairIssueViewRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow FindByRepairIssueViewRowId(int RepairIssueViewRowId) {
                return ((GARepairIssueViewRow)(this.Rows.Find(new object[] {
                            RepairIssueViewRowId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GARepairIssueViewDataTable cln = ((GARepairIssueViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GARepairIssueViewDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRepairIssueViewRowId = base.Columns["RepairIssueViewRowId"];
                this.columnRepairIssueViewReferenceId = base.Columns["RepairIssueViewReferenceId"];
                this.columnEquipmentId = base.Columns["EquipmentId"];
                this.columnRequestedBy = base.Columns["RequestedBy"];
                this.columnDateOfFailure = base.Columns["DateOfFailure"];
                this.columnRepairsNeeded = base.Columns["RepairsNeeded"];
                this.columnStatus = base.Columns["Status"];
                this.columnResponsible = base.Columns["Responsible"];
                this.columnResponsibleRoleListsRowId = base.Columns["ResponsibleRoleListsRowId"];
                this.columnDateRepairCompleted = base.Columns["DateRepairCompleted"];
                this.columnLessonsLearned = base.Columns["LessonsLearned"];
                this.columnnTextFree2 = base.Columns["nTextFree2"];
                this.columnnTextFree3 = base.Columns["nTextFree3"];
                this.columnTypeOfEquipment = base.Columns["TypeOfEquipment"];
                this.columnTypeOfIssue = base.Columns["TypeOfIssue"];
                this.columnIntFree3 = base.Columns["IntFree3"];
                this.columnDateRepairBy = base.Columns["DateRepairBy"];
                this.columnDatePlannedRepair = base.Columns["DatePlannedRepair"];
                this.columnEquipmentSupplier = base.Columns["EquipmentSupplier"];
                this.columnRepairedBy = base.Columns["RepairedBy"];
                this.columnTextFree3 = base.Columns["TextFree3"];
                this.columnSwitchFree1 = base.Columns["SwitchFree1"];
                this.columnSwitchFree2 = base.Columns["SwitchFree2"];
                this.columnSwitchFree3 = base.Columns["SwitchFree3"];
                this.columnDateRepairOrdered = base.Columns["DateRepairOrdered"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRepairIssueViewRowId = new System.Data.DataColumn("RepairIssueViewRowId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairIssueViewRowId);
                this.columnRepairIssueViewReferenceId = new System.Data.DataColumn("RepairIssueViewReferenceId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairIssueViewReferenceId);
                this.columnEquipmentId = new System.Data.DataColumn("EquipmentId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentId);
                this.columnRequestedBy = new System.Data.DataColumn("RequestedBy", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedBy);
                this.columnDateOfFailure = new System.Data.DataColumn("DateOfFailure", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFailure);
                this.columnRepairsNeeded = new System.Data.DataColumn("RepairsNeeded", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairsNeeded);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnResponsible = new System.Data.DataColumn("Responsible", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsible);
                this.columnResponsibleRoleListsRowId = new System.Data.DataColumn("ResponsibleRoleListsRowId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibleRoleListsRowId);
                this.columnDateRepairCompleted = new System.Data.DataColumn("DateRepairCompleted", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairCompleted);
                this.columnLessonsLearned = new System.Data.DataColumn("LessonsLearned", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLessonsLearned);
                this.columnnTextFree2 = new System.Data.DataColumn("nTextFree2", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree2);
                this.columnnTextFree3 = new System.Data.DataColumn("nTextFree3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree3);
                this.columnTypeOfEquipment = new System.Data.DataColumn("TypeOfEquipment", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfEquipment);
                this.columnTypeOfIssue = new System.Data.DataColumn("TypeOfIssue", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfIssue);
                this.columnIntFree3 = new System.Data.DataColumn("IntFree3", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntFree3);
                this.columnDateRepairBy = new System.Data.DataColumn("DateRepairBy", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairBy);
                this.columnDatePlannedRepair = new System.Data.DataColumn("DatePlannedRepair", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatePlannedRepair);
                this.columnEquipmentSupplier = new System.Data.DataColumn("EquipmentSupplier", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentSupplier);
                this.columnRepairedBy = new System.Data.DataColumn("RepairedBy", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairedBy);
                this.columnTextFree3 = new System.Data.DataColumn("TextFree3", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextFree3);
                this.columnSwitchFree1 = new System.Data.DataColumn("SwitchFree1", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree1);
                this.columnSwitchFree2 = new System.Data.DataColumn("SwitchFree2", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree2);
                this.columnSwitchFree3 = new System.Data.DataColumn("SwitchFree3", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree3);
                this.columnDateRepairOrdered = new System.Data.DataColumn("DateRepairOrdered", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairOrdered);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnRepairIssueViewRowId}, true));
                this.columnRepairIssueViewRowId.AutoIncrement = true;
                this.columnRepairIssueViewRowId.AllowDBNull = false;
                this.columnRepairIssueViewRowId.ReadOnly = true;
                this.columnRepairIssueViewRowId.Unique = true;
                this.columnRepairIssueViewReferenceId.MaxLength = 50;
                this.columnEquipmentId.MaxLength = 200;
                this.columnRepairsNeeded.MaxLength = 1073741823;
                this.columnLessonsLearned.MaxLength = 1073741823;
                this.columnnTextFree2.MaxLength = 1073741823;
                this.columnnTextFree3.MaxLength = 1073741823;
                this.columnEquipmentSupplier.MaxLength = 200;
                this.columnRepairedBy.MaxLength = 200;
                this.columnTextFree3.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow NewGARepairIssueViewRow() {
                return ((GARepairIssueViewRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GARepairIssueViewRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GARepairIssueViewRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GARepairIssueViewRowChanged != null)) {
                    this.GARepairIssueViewRowChanged(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GARepairIssueViewRowChanging != null)) {
                    this.GARepairIssueViewRowChanging(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GARepairIssueViewRowDeleted != null)) {
                    this.GARepairIssueViewRowDeleted(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GARepairIssueViewRowDeleting != null)) {
                    this.GARepairIssueViewRowDeleting(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGARepairIssueViewRow(GARepairIssueViewRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                RepairIssueViewDS ds = new RepairIssueViewDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GARepairIssueViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GARepairIssueViewRow : System.Data.DataRow {
            
            private GARepairIssueViewDataTable tableGARepairIssueView;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GARepairIssueViewRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGARepairIssueView = ((GARepairIssueViewDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RepairIssueViewRowId {
                get {
                    return ((int)(this[this.tableGARepairIssueView.RepairIssueViewRowIdColumn]));
                }
                set {
                    this[this.tableGARepairIssueView.RepairIssueViewRowIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairIssueViewReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepairIssueViewReferenceId\' in table \'GARepairIssueView\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentId {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.EquipmentIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EquipmentId\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.EquipmentIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestedBy {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.RequestedByColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RequestedBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RequestedByColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFailure {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGARepairIssueView.DateOfFailureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateOfFailure\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateOfFailureColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairsNeeded {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairsNeededColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepairsNeeded\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairsNeededColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.StatusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Responsible {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.ResponsibleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Responsible\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.ResponsibleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResponsibleRoleListsRowId {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ResponsibleRoleListsRowId\' in table \'GARepairIssueView\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairCompleted {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGARepairIssueView.DateRepairCompletedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateRepairCompleted\' in table \'GARepairIssueView\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairCompletedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LessonsLearned {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.LessonsLearnedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'LessonsLearned\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.LessonsLearnedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree2 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.nTextFree2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nTextFree2\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.nTextFree2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.nTextFree3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nTextFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.nTextFree3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfEquipment {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.TypeOfEquipmentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TypeOfEquipment\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TypeOfEquipmentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfIssue {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.TypeOfIssueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TypeOfIssue\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TypeOfIssueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IntFree3 {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.IntFree3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'IntFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.IntFree3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairBy {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGARepairIssueView.DateRepairByColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateRepairBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairByColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DatePlannedRepair {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGARepairIssueView.DatePlannedRepairColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DatePlannedRepair\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DatePlannedRepairColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentSupplier {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.EquipmentSupplierColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'EquipmentSupplier\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.EquipmentSupplierColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairedBy {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairedByColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RepairedBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairedByColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.TextFree3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TextFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TextFree3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree1 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree1Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SwitchFree1\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree1Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree2 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree2Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SwitchFree2\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree2Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree3 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree3Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SwitchFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree3Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairOrdered {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableGARepairIssueView.DateRepairOrderedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DateRepairOrdered\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairOrderedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairIssueViewReferenceIdNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairIssueViewReferenceIdNull() {
                this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentIdNull() {
                return this.IsNull(this.tableGARepairIssueView.EquipmentIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentIdNull() {
                this[this.tableGARepairIssueView.EquipmentIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestedByNull() {
                return this.IsNull(this.tableGARepairIssueView.RequestedByColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestedByNull() {
                this[this.tableGARepairIssueView.RequestedByColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfFailureNull() {
                return this.IsNull(this.tableGARepairIssueView.DateOfFailureColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfFailureNull() {
                this[this.tableGARepairIssueView.DateOfFailureColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairsNeededNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairsNeededColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairsNeededNull() {
                this[this.tableGARepairIssueView.RepairsNeededColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableGARepairIssueView.StatusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableGARepairIssueView.StatusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibleNull() {
                return this.IsNull(this.tableGARepairIssueView.ResponsibleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibleNull() {
                this[this.tableGARepairIssueView.ResponsibleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibleRoleListsRowIdNull() {
                return this.IsNull(this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibleRoleListsRowIdNull() {
                this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairCompletedNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairCompletedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairCompletedNull() {
                this[this.tableGARepairIssueView.DateRepairCompletedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLessonsLearnedNull() {
                return this.IsNull(this.tableGARepairIssueView.LessonsLearnedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLessonsLearnedNull() {
                this[this.tableGARepairIssueView.LessonsLearnedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree2Null() {
                return this.IsNull(this.tableGARepairIssueView.nTextFree2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree2Null() {
                this[this.tableGARepairIssueView.nTextFree2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.nTextFree3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree3Null() {
                this[this.tableGARepairIssueView.nTextFree3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfEquipmentNull() {
                return this.IsNull(this.tableGARepairIssueView.TypeOfEquipmentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfEquipmentNull() {
                this[this.tableGARepairIssueView.TypeOfEquipmentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfIssueNull() {
                return this.IsNull(this.tableGARepairIssueView.TypeOfIssueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfIssueNull() {
                this[this.tableGARepairIssueView.TypeOfIssueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.IntFree3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntFree3Null() {
                this[this.tableGARepairIssueView.IntFree3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairByNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairByColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairByNull() {
                this[this.tableGARepairIssueView.DateRepairByColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatePlannedRepairNull() {
                return this.IsNull(this.tableGARepairIssueView.DatePlannedRepairColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatePlannedRepairNull() {
                this[this.tableGARepairIssueView.DatePlannedRepairColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentSupplierNull() {
                return this.IsNull(this.tableGARepairIssueView.EquipmentSupplierColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentSupplierNull() {
                this[this.tableGARepairIssueView.EquipmentSupplierColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairedByNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairedByColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairedByNull() {
                this[this.tableGARepairIssueView.RepairedByColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.TextFree3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextFree3Null() {
                this[this.tableGARepairIssueView.TextFree3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree1Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree1Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree1Null() {
                this[this.tableGARepairIssueView.SwitchFree1Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree2Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree2Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree2Null() {
                this[this.tableGARepairIssueView.SwitchFree2Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree3Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree3Null() {
                this[this.tableGARepairIssueView.SwitchFree3Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairOrderedNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairOrderedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairOrderedNull() {
                this[this.tableGARepairIssueView.DateRepairOrderedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GARepairIssueViewRowChangeEvent : System.EventArgs {
            
            private GARepairIssueViewRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRowChangeEvent(GARepairIssueViewRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace GASystem.DataModel.RepairIssueViewDSTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class GARepairIssueViewTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GARepairIssueViewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "GARepairIssueView";
            tableMapping.ColumnMappings.Add("RepairIssueViewRowId", "RepairIssueViewRowId");
            tableMapping.ColumnMappings.Add("RepairIssueViewReferenceId", "RepairIssueViewReferenceId");
            tableMapping.ColumnMappings.Add("EquipmentId", "EquipmentId");
            tableMapping.ColumnMappings.Add("RequestedBy", "RequestedBy");
            tableMapping.ColumnMappings.Add("DateOfFailure", "DateOfFailure");
            tableMapping.ColumnMappings.Add("RepairsNeeded", "RepairsNeeded");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("Responsible", "Responsible");
            tableMapping.ColumnMappings.Add("ResponsibleRoleListsRowId", "ResponsibleRoleListsRowId");
            tableMapping.ColumnMappings.Add("DateRepairCompleted", "DateRepairCompleted");
            tableMapping.ColumnMappings.Add("LessonsLearned", "LessonsLearned");
            tableMapping.ColumnMappings.Add("nTextFree2", "nTextFree2");
            tableMapping.ColumnMappings.Add("nTextFree3", "nTextFree3");
            tableMapping.ColumnMappings.Add("TypeOfEquipment", "TypeOfEquipment");
            tableMapping.ColumnMappings.Add("TypeOfIssue", "TypeOfIssue");
            tableMapping.ColumnMappings.Add("IntFree3", "IntFree3");
            tableMapping.ColumnMappings.Add("DateRepairBy", "DateRepairBy");
            tableMapping.ColumnMappings.Add("DatePlannedRepair", "DatePlannedRepair");
            tableMapping.ColumnMappings.Add("EquipmentSupplier", "EquipmentSupplier");
            tableMapping.ColumnMappings.Add("RepairedBy", "RepairedBy");
            tableMapping.ColumnMappings.Add("TextFree3", "TextFree3");
            tableMapping.ColumnMappings.Add("SwitchFree1", "SwitchFree1");
            tableMapping.ColumnMappings.Add("SwitchFree2", "SwitchFree2");
            tableMapping.ColumnMappings.Add("SwitchFree3", "SwitchFree3");
            tableMapping.ColumnMappings.Add("DateRepairOrdered", "DateRepairOrdered");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::GASystem.Properties.Settings.Default.flagdata070807ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT RepairIssueViewRowId, RepairIssueViewReferenceId, EquipmentId, RequestedBy, DateOfFailure, RepairsNeeded, Status, Responsible, ResponsibleRoleListsRowId, DateRepairCompleted, LessonsLearned, nTextFree2, nTextFree3, TypeOfEquipment, TypeOfIssue, IntFree3, DateRepairBy, DatePlannedRepair, EquipmentSupplier, RepairedBy, TextFree3, SwitchFree1, SwitchFree2, SwitchFree3, DateRepairOrdered FROM dbo.GARepairIssueView";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(RepairIssueViewDS.GARepairIssueViewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual RepairIssueViewDS.GARepairIssueViewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            RepairIssueViewDS.GARepairIssueViewDataTable dataTable = new RepairIssueViewDS.GARepairIssueViewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591