//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace GASystem.DataModel {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SkeltaDS : DataSet {
        
        private SWActivityListDataTable tableSWActivityList;
        
        private SWLongDataTable tableSWLong;
        
        private SWExecuteDataTable tableSWExecute;
        
        private SWVirtualUserDataTable tableSWVirtualUser;
        
        private dsw_ActivityDataTable tabledsw_Activity;
        
        public SkeltaDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SkeltaDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SWActivityList"] != null)) {
                    this.Tables.Add(new SWActivityListDataTable(ds.Tables["SWActivityList"]));
                }
                if ((ds.Tables["SWLong"] != null)) {
                    this.Tables.Add(new SWLongDataTable(ds.Tables["SWLong"]));
                }
                if ((ds.Tables["SWExecute"] != null)) {
                    this.Tables.Add(new SWExecuteDataTable(ds.Tables["SWExecute"]));
                }
                if ((ds.Tables["SWVirtualUser"] != null)) {
                    this.Tables.Add(new SWVirtualUserDataTable(ds.Tables["SWVirtualUser"]));
                }
                if ((ds.Tables["dsw_Activity"] != null)) {
                    this.Tables.Add(new dsw_ActivityDataTable(ds.Tables["dsw_Activity"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWActivityListDataTable SWActivityList {
            get {
                return this.tableSWActivityList;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWLongDataTable SWLong {
            get {
                return this.tableSWLong;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWExecuteDataTable SWExecute {
            get {
                return this.tableSWExecute;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SWVirtualUserDataTable SWVirtualUser {
            get {
                return this.tableSWVirtualUser;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dsw_ActivityDataTable dsw_Activity {
            get {
                return this.tabledsw_Activity;
            }
        }
        
        public override DataSet Clone() {
            SkeltaDS cln = ((SkeltaDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SWActivityList"] != null)) {
                this.Tables.Add(new SWActivityListDataTable(ds.Tables["SWActivityList"]));
            }
            if ((ds.Tables["SWLong"] != null)) {
                this.Tables.Add(new SWLongDataTable(ds.Tables["SWLong"]));
            }
            if ((ds.Tables["SWExecute"] != null)) {
                this.Tables.Add(new SWExecuteDataTable(ds.Tables["SWExecute"]));
            }
            if ((ds.Tables["SWVirtualUser"] != null)) {
                this.Tables.Add(new SWVirtualUserDataTable(ds.Tables["SWVirtualUser"]));
            }
            if ((ds.Tables["dsw_Activity"] != null)) {
                this.Tables.Add(new dsw_ActivityDataTable(ds.Tables["dsw_Activity"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSWActivityList = ((SWActivityListDataTable)(this.Tables["SWActivityList"]));
            if ((this.tableSWActivityList != null)) {
                this.tableSWActivityList.InitVars();
            }
            this.tableSWLong = ((SWLongDataTable)(this.Tables["SWLong"]));
            if ((this.tableSWLong != null)) {
                this.tableSWLong.InitVars();
            }
            this.tableSWExecute = ((SWExecuteDataTable)(this.Tables["SWExecute"]));
            if ((this.tableSWExecute != null)) {
                this.tableSWExecute.InitVars();
            }
            this.tableSWVirtualUser = ((SWVirtualUserDataTable)(this.Tables["SWVirtualUser"]));
            if ((this.tableSWVirtualUser != null)) {
                this.tableSWVirtualUser.InitVars();
            }
            this.tabledsw_Activity = ((dsw_ActivityDataTable)(this.Tables["dsw_Activity"]));
            if ((this.tabledsw_Activity != null)) {
                this.tabledsw_Activity.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "SkeltaDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SkeltaDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSWActivityList = new SWActivityListDataTable();
            this.Tables.Add(this.tableSWActivityList);
            this.tableSWLong = new SWLongDataTable();
            this.Tables.Add(this.tableSWLong);
            this.tableSWExecute = new SWExecuteDataTable();
            this.Tables.Add(this.tableSWExecute);
            this.tableSWVirtualUser = new SWVirtualUserDataTable();
            this.Tables.Add(this.tableSWVirtualUser);
            this.tabledsw_Activity = new dsw_ActivityDataTable();
            this.Tables.Add(this.tabledsw_Activity);
        }
        
        private bool ShouldSerializeSWActivityList() {
            return false;
        }
        
        private bool ShouldSerializeSWLong() {
            return false;
        }
        
        private bool ShouldSerializeSWExecute() {
            return false;
        }
        
        private bool ShouldSerializeSWVirtualUser() {
            return false;
        }
        
        private bool ShouldSerializedsw_Activity() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SWActivityListRowChangeEventHandler(object sender, SWActivityListRowChangeEvent e);
        
        public delegate void SWLongRowChangeEventHandler(object sender, SWLongRowChangeEvent e);
        
        public delegate void SWExecuteRowChangeEventHandler(object sender, SWExecuteRowChangeEvent e);
        
        public delegate void SWVirtualUserRowChangeEventHandler(object sender, SWVirtualUserRowChangeEvent e);
        
        public delegate void dsw_ActivityRowChangeEventHandler(object sender, dsw_ActivityRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWActivityListDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnActivityName;
            
            private DataColumn columnTimeOutForActivity;
            
            private DataColumn columnTimeOutForActivityTaskId;
            
            private DataColumn columnTimeOutWarningForActivity;
            
            private DataColumn columnTimeOutWarningActivityTaskId;
            
            private DataColumn columnBusinessHrFlag;
            
            private DataColumn columnExecutionId;
            
            private DataColumn columnExecutionDetailsId;
            
            private DataColumn columnWorkFlowType;
            
            private DataColumn columnDescription;
            
            private DataColumn columnSubmittedBy;
            
            private DataColumn columnActionRequired;
            
            private DataColumn columnResponseBy;
            
            private DataColumn columnSeverity;
            
            private DataColumn columnAssignedOn;
            
            private DataColumn columnOnBehalfOfuser;
            
            private DataColumn columnVirtualUserId;
            
            private DataColumn columnStatus;
            
            private DataColumn columnSubject;
            
            private DataColumn columnNotes;
            
            private DataColumn columnAppendResultsTodata;
            
            private DataColumn columnHideResponse;
            
            private DataColumn columnForwardingAllowed;
            
            private DataColumn columnShowCustomDocumentViewWindow;
            
            private DataColumn columnWaitForAllParticipants;
            
            private DataColumn columnLastUpdatedDateTime;
            
            private DataColumn columnData;
            
            private DataColumn columnComments;
            
            internal SWActivityListDataTable() : 
                    base("SWActivityList") {
                this.InitClass();
            }
            
            internal SWActivityListDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ActivityNameColumn {
                get {
                    return this.columnActivityName;
                }
            }
            
            internal DataColumn TimeOutForActivityColumn {
                get {
                    return this.columnTimeOutForActivity;
                }
            }
            
            internal DataColumn TimeOutForActivityTaskIdColumn {
                get {
                    return this.columnTimeOutForActivityTaskId;
                }
            }
            
            internal DataColumn TimeOutWarningForActivityColumn {
                get {
                    return this.columnTimeOutWarningForActivity;
                }
            }
            
            internal DataColumn TimeOutWarningActivityTaskIdColumn {
                get {
                    return this.columnTimeOutWarningActivityTaskId;
                }
            }
            
            internal DataColumn BusinessHrFlagColumn {
                get {
                    return this.columnBusinessHrFlag;
                }
            }
            
            internal DataColumn ExecutionIdColumn {
                get {
                    return this.columnExecutionId;
                }
            }
            
            internal DataColumn ExecutionDetailsIdColumn {
                get {
                    return this.columnExecutionDetailsId;
                }
            }
            
            internal DataColumn WorkFlowTypeColumn {
                get {
                    return this.columnWorkFlowType;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn SubmittedByColumn {
                get {
                    return this.columnSubmittedBy;
                }
            }
            
            internal DataColumn ActionRequiredColumn {
                get {
                    return this.columnActionRequired;
                }
            }
            
            internal DataColumn ResponseByColumn {
                get {
                    return this.columnResponseBy;
                }
            }
            
            internal DataColumn SeverityColumn {
                get {
                    return this.columnSeverity;
                }
            }
            
            internal DataColumn AssignedOnColumn {
                get {
                    return this.columnAssignedOn;
                }
            }
            
            internal DataColumn OnBehalfOfuserColumn {
                get {
                    return this.columnOnBehalfOfuser;
                }
            }
            
            internal DataColumn VirtualUserIdColumn {
                get {
                    return this.columnVirtualUserId;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            internal DataColumn AppendResultsTodataColumn {
                get {
                    return this.columnAppendResultsTodata;
                }
            }
            
            internal DataColumn HideResponseColumn {
                get {
                    return this.columnHideResponse;
                }
            }
            
            internal DataColumn ForwardingAllowedColumn {
                get {
                    return this.columnForwardingAllowed;
                }
            }
            
            internal DataColumn ShowCustomDocumentViewWindowColumn {
                get {
                    return this.columnShowCustomDocumentViewWindow;
                }
            }
            
            internal DataColumn WaitForAllParticipantsColumn {
                get {
                    return this.columnWaitForAllParticipants;
                }
            }
            
            internal DataColumn LastUpdatedDateTimeColumn {
                get {
                    return this.columnLastUpdatedDateTime;
                }
            }
            
            internal DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            internal DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            public SWActivityListRow this[int index] {
                get {
                    return ((SWActivityListRow)(this.Rows[index]));
                }
            }
            
            public event SWActivityListRowChangeEventHandler SWActivityListRowChanged;
            
            public event SWActivityListRowChangeEventHandler SWActivityListRowChanging;
            
            public event SWActivityListRowChangeEventHandler SWActivityListRowDeleted;
            
            public event SWActivityListRowChangeEventHandler SWActivityListRowDeleting;
            
            public void AddSWActivityListRow(SWActivityListRow row) {
                this.Rows.Add(row);
            }
            
            public SWActivityListRow AddSWActivityListRow(
                        string ActivityName, 
                        string TimeOutForActivity, 
                        int TimeOutForActivityTaskId, 
                        string TimeOutWarningForActivity, 
                        int TimeOutWarningActivityTaskId, 
                        string BusinessHrFlag, 
                        int ExecutionId, 
                        int ExecutionDetailsId, 
                        string WorkFlowType, 
                        string Description, 
                        int SubmittedBy, 
                        string ActionRequired, 
                        System.DateTime ResponseBy, 
                        string Severity, 
                        System.DateTime AssignedOn, 
                        int OnBehalfOfuser, 
                        int VirtualUserId, 
                        string Status, 
                        int Subject, 
                        int Notes, 
                        string AppendResultsTodata, 
                        string HideResponse, 
                        string ForwardingAllowed, 
                        string ShowCustomDocumentViewWindow, 
                        string WaitForAllParticipants, 
                        System.DateTime LastUpdatedDateTime, 
                        int Data, 
                        string Comments) {
                SWActivityListRow rowSWActivityListRow = ((SWActivityListRow)(this.NewRow()));
                rowSWActivityListRow.ItemArray = new object[] {
                        null,
                        ActivityName,
                        TimeOutForActivity,
                        TimeOutForActivityTaskId,
                        TimeOutWarningForActivity,
                        TimeOutWarningActivityTaskId,
                        BusinessHrFlag,
                        ExecutionId,
                        ExecutionDetailsId,
                        WorkFlowType,
                        Description,
                        SubmittedBy,
                        ActionRequired,
                        ResponseBy,
                        Severity,
                        AssignedOn,
                        OnBehalfOfuser,
                        VirtualUserId,
                        Status,
                        Subject,
                        Notes,
                        AppendResultsTodata,
                        HideResponse,
                        ForwardingAllowed,
                        ShowCustomDocumentViewWindow,
                        WaitForAllParticipants,
                        LastUpdatedDateTime,
                        Data,
                        Comments};
                this.Rows.Add(rowSWActivityListRow);
                return rowSWActivityListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SWActivityListDataTable cln = ((SWActivityListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SWActivityListDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnActivityName = this.Columns["ActivityName"];
                this.columnTimeOutForActivity = this.Columns["TimeOutForActivity"];
                this.columnTimeOutForActivityTaskId = this.Columns["TimeOutForActivityTaskId"];
                this.columnTimeOutWarningForActivity = this.Columns["TimeOutWarningForActivity"];
                this.columnTimeOutWarningActivityTaskId = this.Columns["TimeOutWarningActivityTaskId"];
                this.columnBusinessHrFlag = this.Columns["BusinessHrFlag"];
                this.columnExecutionId = this.Columns["ExecutionId"];
                this.columnExecutionDetailsId = this.Columns["ExecutionDetailsId"];
                this.columnWorkFlowType = this.Columns["WorkFlowType"];
                this.columnDescription = this.Columns["Description"];
                this.columnSubmittedBy = this.Columns["SubmittedBy"];
                this.columnActionRequired = this.Columns["ActionRequired"];
                this.columnResponseBy = this.Columns["ResponseBy"];
                this.columnSeverity = this.Columns["Severity"];
                this.columnAssignedOn = this.Columns["AssignedOn"];
                this.columnOnBehalfOfuser = this.Columns["OnBehalfOfuser"];
                this.columnVirtualUserId = this.Columns["VirtualUserId"];
                this.columnStatus = this.Columns["Status"];
                this.columnSubject = this.Columns["Subject"];
                this.columnNotes = this.Columns["Notes"];
                this.columnAppendResultsTodata = this.Columns["AppendResultsTodata"];
                this.columnHideResponse = this.Columns["HideResponse"];
                this.columnForwardingAllowed = this.Columns["ForwardingAllowed"];
                this.columnShowCustomDocumentViewWindow = this.Columns["ShowCustomDocumentViewWindow"];
                this.columnWaitForAllParticipants = this.Columns["WaitForAllParticipants"];
                this.columnLastUpdatedDateTime = this.Columns["LastUpdatedDateTime"];
                this.columnData = this.Columns["Data"];
                this.columnComments = this.Columns["Comments"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnActivityName = new DataColumn("ActivityName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivityName);
                this.columnTimeOutForActivity = new DataColumn("TimeOutForActivity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutForActivity);
                this.columnTimeOutForActivityTaskId = new DataColumn("TimeOutForActivityTaskId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutForActivityTaskId);
                this.columnTimeOutWarningForActivity = new DataColumn("TimeOutWarningForActivity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutWarningForActivity);
                this.columnTimeOutWarningActivityTaskId = new DataColumn("TimeOutWarningActivityTaskId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutWarningActivityTaskId);
                this.columnBusinessHrFlag = new DataColumn("BusinessHrFlag", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBusinessHrFlag);
                this.columnExecutionId = new DataColumn("ExecutionId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionId);
                this.columnExecutionDetailsId = new DataColumn("ExecutionDetailsId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionDetailsId);
                this.columnWorkFlowType = new DataColumn("WorkFlowType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkFlowType);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnSubmittedBy = new DataColumn("SubmittedBy", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubmittedBy);
                this.columnActionRequired = new DataColumn("ActionRequired", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActionRequired);
                this.columnResponseBy = new DataColumn("ResponseBy", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponseBy);
                this.columnSeverity = new DataColumn("Severity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeverity);
                this.columnAssignedOn = new DataColumn("AssignedOn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignedOn);
                this.columnOnBehalfOfuser = new DataColumn("OnBehalfOfuser", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOnBehalfOfuser);
                this.columnVirtualUserId = new DataColumn("VirtualUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVirtualUserId);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnSubject = new DataColumn("Subject", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnNotes = new DataColumn("Notes", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNotes);
                this.columnAppendResultsTodata = new DataColumn("AppendResultsTodata", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAppendResultsTodata);
                this.columnHideResponse = new DataColumn("HideResponse", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHideResponse);
                this.columnForwardingAllowed = new DataColumn("ForwardingAllowed", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnForwardingAllowed);
                this.columnShowCustomDocumentViewWindow = new DataColumn("ShowCustomDocumentViewWindow", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShowCustomDocumentViewWindow);
                this.columnWaitForAllParticipants = new DataColumn("WaitForAllParticipants", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWaitForAllParticipants);
                this.columnLastUpdatedDateTime = new DataColumn("LastUpdatedDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdatedDateTime);
                this.columnData = new DataColumn("Data", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnData);
                this.columnComments = new DataColumn("Comments", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnComments);
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
            }
            
            public SWActivityListRow NewSWActivityListRow() {
                return ((SWActivityListRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SWActivityListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SWActivityListRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWActivityListRowChanged != null)) {
                    this.SWActivityListRowChanged(this, new SWActivityListRowChangeEvent(((SWActivityListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWActivityListRowChanging != null)) {
                    this.SWActivityListRowChanging(this, new SWActivityListRowChangeEvent(((SWActivityListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWActivityListRowDeleted != null)) {
                    this.SWActivityListRowDeleted(this, new SWActivityListRowChangeEvent(((SWActivityListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWActivityListRowDeleting != null)) {
                    this.SWActivityListRowDeleting(this, new SWActivityListRowChangeEvent(((SWActivityListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSWActivityListRow(SWActivityListRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWActivityListRow : DataRow {
            
            private SWActivityListDataTable tableSWActivityList;
            
            internal SWActivityListRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWActivityList = ((SWActivityListDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableSWActivityList.IdColumn]));
                }
                set {
                    this[this.tableSWActivityList.IdColumn] = value;
                }
            }
            
            public string ActivityName {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.ActivityNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ActivityNameColumn] = value;
                }
            }
            
            public string TimeOutForActivity {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.TimeOutForActivityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.TimeOutForActivityColumn] = value;
                }
            }
            
            public int TimeOutForActivityTaskId {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.TimeOutForActivityTaskIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.TimeOutForActivityTaskIdColumn] = value;
                }
            }
            
            public string TimeOutWarningForActivity {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.TimeOutWarningForActivityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.TimeOutWarningForActivityColumn] = value;
                }
            }
            
            public int TimeOutWarningActivityTaskId {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.TimeOutWarningActivityTaskIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.TimeOutWarningActivityTaskIdColumn] = value;
                }
            }
            
            public string BusinessHrFlag {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.BusinessHrFlagColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.BusinessHrFlagColumn] = value;
                }
            }
            
            public int ExecutionId {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.ExecutionIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ExecutionIdColumn] = value;
                }
            }
            
            public int ExecutionDetailsId {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.ExecutionDetailsIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ExecutionDetailsIdColumn] = value;
                }
            }
            
            public string WorkFlowType {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.WorkFlowTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.WorkFlowTypeColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.DescriptionColumn] = value;
                }
            }
            
            public int SubmittedBy {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.SubmittedByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.SubmittedByColumn] = value;
                }
            }
            
            public string ActionRequired {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.ActionRequiredColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ActionRequiredColumn] = value;
                }
            }
            
            public System.DateTime ResponseBy {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWActivityList.ResponseByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ResponseByColumn] = value;
                }
            }
            
            public string Severity {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.SeverityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.SeverityColumn] = value;
                }
            }
            
            public System.DateTime AssignedOn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWActivityList.AssignedOnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.AssignedOnColumn] = value;
                }
            }
            
            public int OnBehalfOfuser {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.OnBehalfOfuserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.OnBehalfOfuserColumn] = value;
                }
            }
            
            public int VirtualUserId {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.VirtualUserIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.VirtualUserIdColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.StatusColumn] = value;
                }
            }
            
            public int Subject {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.SubjectColumn] = value;
                }
            }
            
            public int Notes {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.NotesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.NotesColumn] = value;
                }
            }
            
            public string AppendResultsTodata {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.AppendResultsTodataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.AppendResultsTodataColumn] = value;
                }
            }
            
            public string HideResponse {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.HideResponseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.HideResponseColumn] = value;
                }
            }
            
            public string ForwardingAllowed {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.ForwardingAllowedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ForwardingAllowedColumn] = value;
                }
            }
            
            public string ShowCustomDocumentViewWindow {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.ShowCustomDocumentViewWindowColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.ShowCustomDocumentViewWindowColumn] = value;
                }
            }
            
            public string WaitForAllParticipants {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.WaitForAllParticipantsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.WaitForAllParticipantsColumn] = value;
                }
            }
            
            public System.DateTime LastUpdatedDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWActivityList.LastUpdatedDateTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.LastUpdatedDateTimeColumn] = value;
                }
            }
            
            public int Data {
                get {
                    try {
                        return ((int)(this[this.tableSWActivityList.DataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.DataColumn] = value;
                }
            }
            
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableSWActivityList.CommentsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWActivityList.CommentsColumn] = value;
                }
            }
            
            public bool IsActivityNameNull() {
                return this.IsNull(this.tableSWActivityList.ActivityNameColumn);
            }
            
            public void SetActivityNameNull() {
                this[this.tableSWActivityList.ActivityNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutForActivityNull() {
                return this.IsNull(this.tableSWActivityList.TimeOutForActivityColumn);
            }
            
            public void SetTimeOutForActivityNull() {
                this[this.tableSWActivityList.TimeOutForActivityColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutForActivityTaskIdNull() {
                return this.IsNull(this.tableSWActivityList.TimeOutForActivityTaskIdColumn);
            }
            
            public void SetTimeOutForActivityTaskIdNull() {
                this[this.tableSWActivityList.TimeOutForActivityTaskIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutWarningForActivityNull() {
                return this.IsNull(this.tableSWActivityList.TimeOutWarningForActivityColumn);
            }
            
            public void SetTimeOutWarningForActivityNull() {
                this[this.tableSWActivityList.TimeOutWarningForActivityColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutWarningActivityTaskIdNull() {
                return this.IsNull(this.tableSWActivityList.TimeOutWarningActivityTaskIdColumn);
            }
            
            public void SetTimeOutWarningActivityTaskIdNull() {
                this[this.tableSWActivityList.TimeOutWarningActivityTaskIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsBusinessHrFlagNull() {
                return this.IsNull(this.tableSWActivityList.BusinessHrFlagColumn);
            }
            
            public void SetBusinessHrFlagNull() {
                this[this.tableSWActivityList.BusinessHrFlagColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionIdNull() {
                return this.IsNull(this.tableSWActivityList.ExecutionIdColumn);
            }
            
            public void SetExecutionIdNull() {
                this[this.tableSWActivityList.ExecutionIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionDetailsIdNull() {
                return this.IsNull(this.tableSWActivityList.ExecutionDetailsIdColumn);
            }
            
            public void SetExecutionDetailsIdNull() {
                this[this.tableSWActivityList.ExecutionDetailsIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsWorkFlowTypeNull() {
                return this.IsNull(this.tableSWActivityList.WorkFlowTypeColumn);
            }
            
            public void SetWorkFlowTypeNull() {
                this[this.tableSWActivityList.WorkFlowTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSWActivityList.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableSWActivityList.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubmittedByNull() {
                return this.IsNull(this.tableSWActivityList.SubmittedByColumn);
            }
            
            public void SetSubmittedByNull() {
                this[this.tableSWActivityList.SubmittedByColumn] = System.Convert.DBNull;
            }
            
            public bool IsActionRequiredNull() {
                return this.IsNull(this.tableSWActivityList.ActionRequiredColumn);
            }
            
            public void SetActionRequiredNull() {
                this[this.tableSWActivityList.ActionRequiredColumn] = System.Convert.DBNull;
            }
            
            public bool IsResponseByNull() {
                return this.IsNull(this.tableSWActivityList.ResponseByColumn);
            }
            
            public void SetResponseByNull() {
                this[this.tableSWActivityList.ResponseByColumn] = System.Convert.DBNull;
            }
            
            public bool IsSeverityNull() {
                return this.IsNull(this.tableSWActivityList.SeverityColumn);
            }
            
            public void SetSeverityNull() {
                this[this.tableSWActivityList.SeverityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignedOnNull() {
                return this.IsNull(this.tableSWActivityList.AssignedOnColumn);
            }
            
            public void SetAssignedOnNull() {
                this[this.tableSWActivityList.AssignedOnColumn] = System.Convert.DBNull;
            }
            
            public bool IsOnBehalfOfuserNull() {
                return this.IsNull(this.tableSWActivityList.OnBehalfOfuserColumn);
            }
            
            public void SetOnBehalfOfuserNull() {
                this[this.tableSWActivityList.OnBehalfOfuserColumn] = System.Convert.DBNull;
            }
            
            public bool IsVirtualUserIdNull() {
                return this.IsNull(this.tableSWActivityList.VirtualUserIdColumn);
            }
            
            public void SetVirtualUserIdNull() {
                this[this.tableSWActivityList.VirtualUserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableSWActivityList.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableSWActivityList.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tableSWActivityList.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tableSWActivityList.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsNotesNull() {
                return this.IsNull(this.tableSWActivityList.NotesColumn);
            }
            
            public void SetNotesNull() {
                this[this.tableSWActivityList.NotesColumn] = System.Convert.DBNull;
            }
            
            public bool IsAppendResultsTodataNull() {
                return this.IsNull(this.tableSWActivityList.AppendResultsTodataColumn);
            }
            
            public void SetAppendResultsTodataNull() {
                this[this.tableSWActivityList.AppendResultsTodataColumn] = System.Convert.DBNull;
            }
            
            public bool IsHideResponseNull() {
                return this.IsNull(this.tableSWActivityList.HideResponseColumn);
            }
            
            public void SetHideResponseNull() {
                this[this.tableSWActivityList.HideResponseColumn] = System.Convert.DBNull;
            }
            
            public bool IsForwardingAllowedNull() {
                return this.IsNull(this.tableSWActivityList.ForwardingAllowedColumn);
            }
            
            public void SetForwardingAllowedNull() {
                this[this.tableSWActivityList.ForwardingAllowedColumn] = System.Convert.DBNull;
            }
            
            public bool IsShowCustomDocumentViewWindowNull() {
                return this.IsNull(this.tableSWActivityList.ShowCustomDocumentViewWindowColumn);
            }
            
            public void SetShowCustomDocumentViewWindowNull() {
                this[this.tableSWActivityList.ShowCustomDocumentViewWindowColumn] = System.Convert.DBNull;
            }
            
            public bool IsWaitForAllParticipantsNull() {
                return this.IsNull(this.tableSWActivityList.WaitForAllParticipantsColumn);
            }
            
            public void SetWaitForAllParticipantsNull() {
                this[this.tableSWActivityList.WaitForAllParticipantsColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedDateTimeNull() {
                return this.IsNull(this.tableSWActivityList.LastUpdatedDateTimeColumn);
            }
            
            public void SetLastUpdatedDateTimeNull() {
                this[this.tableSWActivityList.LastUpdatedDateTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataNull() {
                return this.IsNull(this.tableSWActivityList.DataColumn);
            }
            
            public void SetDataNull() {
                this[this.tableSWActivityList.DataColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentsNull() {
                return this.IsNull(this.tableSWActivityList.CommentsColumn);
            }
            
            public void SetCommentsNull() {
                this[this.tableSWActivityList.CommentsColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWActivityListRowChangeEvent : EventArgs {
            
            private SWActivityListRow eventRow;
            
            private DataRowAction eventAction;
            
            public SWActivityListRowChangeEvent(SWActivityListRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SWActivityListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWLongDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnCharData;
            
            internal SWLongDataTable() : 
                    base("SWLong") {
                this.InitClass();
            }
            
            internal SWLongDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn CharDataColumn {
                get {
                    return this.columnCharData;
                }
            }
            
            public SWLongRow this[int index] {
                get {
                    return ((SWLongRow)(this.Rows[index]));
                }
            }
            
            public event SWLongRowChangeEventHandler SWLongRowChanged;
            
            public event SWLongRowChangeEventHandler SWLongRowChanging;
            
            public event SWLongRowChangeEventHandler SWLongRowDeleted;
            
            public event SWLongRowChangeEventHandler SWLongRowDeleting;
            
            public void AddSWLongRow(SWLongRow row) {
                this.Rows.Add(row);
            }
            
            public SWLongRow AddSWLongRow(string CharData) {
                SWLongRow rowSWLongRow = ((SWLongRow)(this.NewRow()));
                rowSWLongRow.ItemArray = new object[] {
                        null,
                        CharData};
                this.Rows.Add(rowSWLongRow);
                return rowSWLongRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SWLongDataTable cln = ((SWLongDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SWLongDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnCharData = this.Columns["CharData"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnCharData = new DataColumn("CharData", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCharData);
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
            }
            
            public SWLongRow NewSWLongRow() {
                return ((SWLongRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SWLongRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SWLongRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWLongRowChanged != null)) {
                    this.SWLongRowChanged(this, new SWLongRowChangeEvent(((SWLongRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWLongRowChanging != null)) {
                    this.SWLongRowChanging(this, new SWLongRowChangeEvent(((SWLongRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWLongRowDeleted != null)) {
                    this.SWLongRowDeleted(this, new SWLongRowChangeEvent(((SWLongRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWLongRowDeleting != null)) {
                    this.SWLongRowDeleting(this, new SWLongRowChangeEvent(((SWLongRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSWLongRow(SWLongRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWLongRow : DataRow {
            
            private SWLongDataTable tableSWLong;
            
            internal SWLongRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWLong = ((SWLongDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableSWLong.IdColumn]));
                }
                set {
                    this[this.tableSWLong.IdColumn] = value;
                }
            }
            
            public string CharData {
                get {
                    try {
                        return ((string)(this[this.tableSWLong.CharDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWLong.CharDataColumn] = value;
                }
            }
            
            public bool IsCharDataNull() {
                return this.IsNull(this.tableSWLong.CharDataColumn);
            }
            
            public void SetCharDataNull() {
                this[this.tableSWLong.CharDataColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWLongRowChangeEvent : EventArgs {
            
            private SWLongRow eventRow;
            
            private DataRowAction eventAction;
            
            public SWLongRowChangeEvent(SWLongRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SWLongRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWExecuteDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnProductionID;
            
            private DataColumn columnApplication;
            
            private DataColumn columnName;
            
            private DataColumn columnRequestedOn;
            
            private DataColumn columnVirtualUserID;
            
            private DataColumn columnInternalStatus;
            
            private DataColumn columnStatus;
            
            private DataColumn columnGlobalObjects;
            
            private DataColumn columnData;
            
            private DataColumn columnWorkflowData;
            
            private DataColumn columnLastUpdatedDateTime;
            
            private DataColumn columnExecutionEndedAt;
            
            internal SWExecuteDataTable() : 
                    base("SWExecute") {
                this.InitClass();
            }
            
            internal SWExecuteDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn ProductionIDColumn {
                get {
                    return this.columnProductionID;
                }
            }
            
            internal DataColumn ApplicationColumn {
                get {
                    return this.columnApplication;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn RequestedOnColumn {
                get {
                    return this.columnRequestedOn;
                }
            }
            
            internal DataColumn VirtualUserIDColumn {
                get {
                    return this.columnVirtualUserID;
                }
            }
            
            internal DataColumn InternalStatusColumn {
                get {
                    return this.columnInternalStatus;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            internal DataColumn GlobalObjectsColumn {
                get {
                    return this.columnGlobalObjects;
                }
            }
            
            internal DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            internal DataColumn WorkflowDataColumn {
                get {
                    return this.columnWorkflowData;
                }
            }
            
            internal DataColumn LastUpdatedDateTimeColumn {
                get {
                    return this.columnLastUpdatedDateTime;
                }
            }
            
            internal DataColumn ExecutionEndedAtColumn {
                get {
                    return this.columnExecutionEndedAt;
                }
            }
            
            public SWExecuteRow this[int index] {
                get {
                    return ((SWExecuteRow)(this.Rows[index]));
                }
            }
            
            public event SWExecuteRowChangeEventHandler SWExecuteRowChanged;
            
            public event SWExecuteRowChangeEventHandler SWExecuteRowChanging;
            
            public event SWExecuteRowChangeEventHandler SWExecuteRowDeleted;
            
            public event SWExecuteRowChangeEventHandler SWExecuteRowDeleting;
            
            public void AddSWExecuteRow(SWExecuteRow row) {
                this.Rows.Add(row);
            }
            
            public SWExecuteRow AddSWExecuteRow(int ProductionID, string Application, string Name, System.DateTime RequestedOn, int VirtualUserID, string InternalStatus, string Status, System.Byte[] GlobalObjects, int Data, int WorkflowData, System.DateTime LastUpdatedDateTime, System.DateTime ExecutionEndedAt) {
                SWExecuteRow rowSWExecuteRow = ((SWExecuteRow)(this.NewRow()));
                rowSWExecuteRow.ItemArray = new object[] {
                        null,
                        ProductionID,
                        Application,
                        Name,
                        RequestedOn,
                        VirtualUserID,
                        InternalStatus,
                        Status,
                        GlobalObjects,
                        Data,
                        WorkflowData,
                        LastUpdatedDateTime,
                        ExecutionEndedAt};
                this.Rows.Add(rowSWExecuteRow);
                return rowSWExecuteRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SWExecuteDataTable cln = ((SWExecuteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SWExecuteDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnProductionID = this.Columns["ProductionID"];
                this.columnApplication = this.Columns["Application"];
                this.columnName = this.Columns["Name"];
                this.columnRequestedOn = this.Columns["RequestedOn"];
                this.columnVirtualUserID = this.Columns["VirtualUserID"];
                this.columnInternalStatus = this.Columns["InternalStatus"];
                this.columnStatus = this.Columns["Status"];
                this.columnGlobalObjects = this.Columns["GlobalObjects"];
                this.columnData = this.Columns["Data"];
                this.columnWorkflowData = this.Columns["WorkflowData"];
                this.columnLastUpdatedDateTime = this.Columns["LastUpdatedDateTime"];
                this.columnExecutionEndedAt = this.Columns["ExecutionEndedAt"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnProductionID = new DataColumn("ProductionID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductionID);
                this.columnApplication = new DataColumn("Application", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnApplication);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnRequestedOn = new DataColumn("RequestedOn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRequestedOn);
                this.columnVirtualUserID = new DataColumn("VirtualUserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVirtualUserID);
                this.columnInternalStatus = new DataColumn("InternalStatus", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInternalStatus);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnGlobalObjects = new DataColumn("GlobalObjects", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGlobalObjects);
                this.columnData = new DataColumn("Data", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnData);
                this.columnWorkflowData = new DataColumn("WorkflowData", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWorkflowData);
                this.columnLastUpdatedDateTime = new DataColumn("LastUpdatedDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdatedDateTime);
                this.columnExecutionEndedAt = new DataColumn("ExecutionEndedAt", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExecutionEndedAt);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
            }
            
            public SWExecuteRow NewSWExecuteRow() {
                return ((SWExecuteRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SWExecuteRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SWExecuteRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWExecuteRowChanged != null)) {
                    this.SWExecuteRowChanged(this, new SWExecuteRowChangeEvent(((SWExecuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWExecuteRowChanging != null)) {
                    this.SWExecuteRowChanging(this, new SWExecuteRowChangeEvent(((SWExecuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWExecuteRowDeleted != null)) {
                    this.SWExecuteRowDeleted(this, new SWExecuteRowChangeEvent(((SWExecuteRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWExecuteRowDeleting != null)) {
                    this.SWExecuteRowDeleting(this, new SWExecuteRowChangeEvent(((SWExecuteRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSWExecuteRow(SWExecuteRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWExecuteRow : DataRow {
            
            private SWExecuteDataTable tableSWExecute;
            
            internal SWExecuteRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWExecute = ((SWExecuteDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableSWExecute.IDColumn]));
                }
                set {
                    this[this.tableSWExecute.IDColumn] = value;
                }
            }
            
            public int ProductionID {
                get {
                    try {
                        return ((int)(this[this.tableSWExecute.ProductionIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.ProductionIDColumn] = value;
                }
            }
            
            public string Application {
                get {
                    try {
                        return ((string)(this[this.tableSWExecute.ApplicationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.ApplicationColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableSWExecute.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.NameColumn] = value;
                }
            }
            
            public System.DateTime RequestedOn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWExecute.RequestedOnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.RequestedOnColumn] = value;
                }
            }
            
            public int VirtualUserID {
                get {
                    try {
                        return ((int)(this[this.tableSWExecute.VirtualUserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.VirtualUserIDColumn] = value;
                }
            }
            
            public string InternalStatus {
                get {
                    try {
                        return ((string)(this[this.tableSWExecute.InternalStatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.InternalStatusColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableSWExecute.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.StatusColumn] = value;
                }
            }
            
            public System.Byte[] GlobalObjects {
                get {
                    try {
                        return ((System.Byte[])(this[this.tableSWExecute.GlobalObjectsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.GlobalObjectsColumn] = value;
                }
            }
            
            public int Data {
                get {
                    try {
                        return ((int)(this[this.tableSWExecute.DataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.DataColumn] = value;
                }
            }
            
            public int WorkflowData {
                get {
                    try {
                        return ((int)(this[this.tableSWExecute.WorkflowDataColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.WorkflowDataColumn] = value;
                }
            }
            
            public System.DateTime LastUpdatedDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWExecute.LastUpdatedDateTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.LastUpdatedDateTimeColumn] = value;
                }
            }
            
            public System.DateTime ExecutionEndedAt {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWExecute.ExecutionEndedAtColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWExecute.ExecutionEndedAtColumn] = value;
                }
            }
            
            public bool IsProductionIDNull() {
                return this.IsNull(this.tableSWExecute.ProductionIDColumn);
            }
            
            public void SetProductionIDNull() {
                this[this.tableSWExecute.ProductionIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsApplicationNull() {
                return this.IsNull(this.tableSWExecute.ApplicationColumn);
            }
            
            public void SetApplicationNull() {
                this[this.tableSWExecute.ApplicationColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableSWExecute.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableSWExecute.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequestedOnNull() {
                return this.IsNull(this.tableSWExecute.RequestedOnColumn);
            }
            
            public void SetRequestedOnNull() {
                this[this.tableSWExecute.RequestedOnColumn] = System.Convert.DBNull;
            }
            
            public bool IsVirtualUserIDNull() {
                return this.IsNull(this.tableSWExecute.VirtualUserIDColumn);
            }
            
            public void SetVirtualUserIDNull() {
                this[this.tableSWExecute.VirtualUserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsInternalStatusNull() {
                return this.IsNull(this.tableSWExecute.InternalStatusColumn);
            }
            
            public void SetInternalStatusNull() {
                this[this.tableSWExecute.InternalStatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tableSWExecute.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tableSWExecute.StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsGlobalObjectsNull() {
                return this.IsNull(this.tableSWExecute.GlobalObjectsColumn);
            }
            
            public void SetGlobalObjectsNull() {
                this[this.tableSWExecute.GlobalObjectsColumn] = System.Convert.DBNull;
            }
            
            public bool IsDataNull() {
                return this.IsNull(this.tableSWExecute.DataColumn);
            }
            
            public void SetDataNull() {
                this[this.tableSWExecute.DataColumn] = System.Convert.DBNull;
            }
            
            public bool IsWorkflowDataNull() {
                return this.IsNull(this.tableSWExecute.WorkflowDataColumn);
            }
            
            public void SetWorkflowDataNull() {
                this[this.tableSWExecute.WorkflowDataColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedDateTimeNull() {
                return this.IsNull(this.tableSWExecute.LastUpdatedDateTimeColumn);
            }
            
            public void SetLastUpdatedDateTimeNull() {
                this[this.tableSWExecute.LastUpdatedDateTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsExecutionEndedAtNull() {
                return this.IsNull(this.tableSWExecute.ExecutionEndedAtColumn);
            }
            
            public void SetExecutionEndedAtNull() {
                this[this.tableSWExecute.ExecutionEndedAtColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWExecuteRowChangeEvent : EventArgs {
            
            private SWExecuteRow eventRow;
            
            private DataRowAction eventAction;
            
            public SWExecuteRowChangeEvent(SWExecuteRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SWExecuteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWVirtualUserDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnUserIDString;
            
            private DataColumn columnUserID;
            
            private DataColumn columnResourceHandler;
            
            private DataColumn columnLastUpdatedDateTime;
            
            internal SWVirtualUserDataTable() : 
                    base("SWVirtualUser") {
                this.InitClass();
            }
            
            internal SWVirtualUserDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn UserIDStringColumn {
                get {
                    return this.columnUserIDString;
                }
            }
            
            internal DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal DataColumn ResourceHandlerColumn {
                get {
                    return this.columnResourceHandler;
                }
            }
            
            internal DataColumn LastUpdatedDateTimeColumn {
                get {
                    return this.columnLastUpdatedDateTime;
                }
            }
            
            public SWVirtualUserRow this[int index] {
                get {
                    return ((SWVirtualUserRow)(this.Rows[index]));
                }
            }
            
            public event SWVirtualUserRowChangeEventHandler SWVirtualUserRowChanged;
            
            public event SWVirtualUserRowChangeEventHandler SWVirtualUserRowChanging;
            
            public event SWVirtualUserRowChangeEventHandler SWVirtualUserRowDeleted;
            
            public event SWVirtualUserRowChangeEventHandler SWVirtualUserRowDeleting;
            
            public void AddSWVirtualUserRow(SWVirtualUserRow row) {
                this.Rows.Add(row);
            }
            
            public SWVirtualUserRow AddSWVirtualUserRow(string UserIDString, int UserID, string ResourceHandler, System.DateTime LastUpdatedDateTime) {
                SWVirtualUserRow rowSWVirtualUserRow = ((SWVirtualUserRow)(this.NewRow()));
                rowSWVirtualUserRow.ItemArray = new object[] {
                        null,
                        UserIDString,
                        UserID,
                        ResourceHandler,
                        LastUpdatedDateTime};
                this.Rows.Add(rowSWVirtualUserRow);
                return rowSWVirtualUserRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SWVirtualUserDataTable cln = ((SWVirtualUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SWVirtualUserDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnUserIDString = this.Columns["UserIDString"];
                this.columnUserID = this.Columns["UserID"];
                this.columnResourceHandler = this.Columns["ResourceHandler"];
                this.columnLastUpdatedDateTime = this.Columns["LastUpdatedDateTime"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnUserIDString = new DataColumn("UserIDString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserIDString);
                this.columnUserID = new DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserID);
                this.columnResourceHandler = new DataColumn("ResourceHandler", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResourceHandler);
                this.columnLastUpdatedDateTime = new DataColumn("LastUpdatedDateTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLastUpdatedDateTime);
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
            }
            
            public SWVirtualUserRow NewSWVirtualUserRow() {
                return ((SWVirtualUserRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SWVirtualUserRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SWVirtualUserRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SWVirtualUserRowChanged != null)) {
                    this.SWVirtualUserRowChanged(this, new SWVirtualUserRowChangeEvent(((SWVirtualUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SWVirtualUserRowChanging != null)) {
                    this.SWVirtualUserRowChanging(this, new SWVirtualUserRowChangeEvent(((SWVirtualUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SWVirtualUserRowDeleted != null)) {
                    this.SWVirtualUserRowDeleted(this, new SWVirtualUserRowChangeEvent(((SWVirtualUserRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SWVirtualUserRowDeleting != null)) {
                    this.SWVirtualUserRowDeleting(this, new SWVirtualUserRowChangeEvent(((SWVirtualUserRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSWVirtualUserRow(SWVirtualUserRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWVirtualUserRow : DataRow {
            
            private SWVirtualUserDataTable tableSWVirtualUser;
            
            internal SWVirtualUserRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSWVirtualUser = ((SWVirtualUserDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableSWVirtualUser.IDColumn]));
                }
                set {
                    this[this.tableSWVirtualUser.IDColumn] = value;
                }
            }
            
            public string UserIDString {
                get {
                    try {
                        return ((string)(this[this.tableSWVirtualUser.UserIDStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWVirtualUser.UserIDStringColumn] = value;
                }
            }
            
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableSWVirtualUser.UserIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWVirtualUser.UserIDColumn] = value;
                }
            }
            
            public string ResourceHandler {
                get {
                    try {
                        return ((string)(this[this.tableSWVirtualUser.ResourceHandlerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWVirtualUser.ResourceHandlerColumn] = value;
                }
            }
            
            public System.DateTime LastUpdatedDateTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableSWVirtualUser.LastUpdatedDateTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSWVirtualUser.LastUpdatedDateTimeColumn] = value;
                }
            }
            
            public bool IsUserIDStringNull() {
                return this.IsNull(this.tableSWVirtualUser.UserIDStringColumn);
            }
            
            public void SetUserIDStringNull() {
                this[this.tableSWVirtualUser.UserIDStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIDNull() {
                return this.IsNull(this.tableSWVirtualUser.UserIDColumn);
            }
            
            public void SetUserIDNull() {
                this[this.tableSWVirtualUser.UserIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsResourceHandlerNull() {
                return this.IsNull(this.tableSWVirtualUser.ResourceHandlerColumn);
            }
            
            public void SetResourceHandlerNull() {
                this[this.tableSWVirtualUser.ResourceHandlerColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastUpdatedDateTimeNull() {
                return this.IsNull(this.tableSWVirtualUser.LastUpdatedDateTimeColumn);
            }
            
            public void SetLastUpdatedDateTimeNull() {
                this[this.tableSWVirtualUser.LastUpdatedDateTimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SWVirtualUserRowChangeEvent : EventArgs {
            
            private SWVirtualUserRow eventRow;
            
            private DataRowAction eventAction;
            
            public SWVirtualUserRowChangeEvent(SWVirtualUserRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SWVirtualUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dsw_ActivityDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnActivityID;
            
            private DataColumn columnSubject;
            
            private DataColumn columnResponseBy;
            
            private DataColumn columnSeverity;
            
            private DataColumn columnAssignedOn;
            
            private DataColumn columnTimeOutForActivity;
            
            private DataColumn columnVirtualUserId;
            
            private DataColumn columnUserId;
            
            internal dsw_ActivityDataTable() : 
                    base("dsw_Activity") {
                this.InitClass();
            }
            
            internal dsw_ActivityDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ActivityIDColumn {
                get {
                    return this.columnActivityID;
                }
            }
            
            internal DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            internal DataColumn ResponseByColumn {
                get {
                    return this.columnResponseBy;
                }
            }
            
            internal DataColumn SeverityColumn {
                get {
                    return this.columnSeverity;
                }
            }
            
            internal DataColumn AssignedOnColumn {
                get {
                    return this.columnAssignedOn;
                }
            }
            
            internal DataColumn TimeOutForActivityColumn {
                get {
                    return this.columnTimeOutForActivity;
                }
            }
            
            internal DataColumn VirtualUserIdColumn {
                get {
                    return this.columnVirtualUserId;
                }
            }
            
            internal DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            public dsw_ActivityRow this[int index] {
                get {
                    return ((dsw_ActivityRow)(this.Rows[index]));
                }
            }
            
            public event dsw_ActivityRowChangeEventHandler dsw_ActivityRowChanged;
            
            public event dsw_ActivityRowChangeEventHandler dsw_ActivityRowChanging;
            
            public event dsw_ActivityRowChangeEventHandler dsw_ActivityRowDeleted;
            
            public event dsw_ActivityRowChangeEventHandler dsw_ActivityRowDeleting;
            
            public void Adddsw_ActivityRow(dsw_ActivityRow row) {
                this.Rows.Add(row);
            }
            
            public dsw_ActivityRow Adddsw_ActivityRow(int ActivityID, string Subject, System.DateTime ResponseBy, string Severity, System.DateTime AssignedOn, string TimeOutForActivity, int VirtualUserId, int UserId) {
                dsw_ActivityRow rowdsw_ActivityRow = ((dsw_ActivityRow)(this.NewRow()));
                rowdsw_ActivityRow.ItemArray = new object[] {
                        ActivityID,
                        Subject,
                        ResponseBy,
                        Severity,
                        AssignedOn,
                        TimeOutForActivity,
                        VirtualUserId,
                        UserId};
                this.Rows.Add(rowdsw_ActivityRow);
                return rowdsw_ActivityRow;
            }
            
            public dsw_ActivityRow FindByActivityID(int ActivityID) {
                return ((dsw_ActivityRow)(this.Rows.Find(new object[] {
                            ActivityID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                dsw_ActivityDataTable cln = ((dsw_ActivityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new dsw_ActivityDataTable();
            }
            
            internal void InitVars() {
                this.columnActivityID = this.Columns["ActivityID"];
                this.columnSubject = this.Columns["Subject"];
                this.columnResponseBy = this.Columns["ResponseBy"];
                this.columnSeverity = this.Columns["Severity"];
                this.columnAssignedOn = this.Columns["AssignedOn"];
                this.columnTimeOutForActivity = this.Columns["TimeOutForActivity"];
                this.columnVirtualUserId = this.Columns["VirtualUserId"];
                this.columnUserId = this.Columns["UserId"];
            }
            
            private void InitClass() {
                this.columnActivityID = new DataColumn("ActivityID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActivityID);
                this.columnSubject = new DataColumn("Subject", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubject);
                this.columnResponseBy = new DataColumn("ResponseBy", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResponseBy);
                this.columnSeverity = new DataColumn("Severity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSeverity);
                this.columnAssignedOn = new DataColumn("AssignedOn", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignedOn);
                this.columnTimeOutForActivity = new DataColumn("TimeOutForActivity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTimeOutForActivity);
                this.columnVirtualUserId = new DataColumn("VirtualUserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnVirtualUserId);
                this.columnUserId = new DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUserId);
                this.Constraints.Add(new UniqueConstraint("SkeltaDSKey1", new DataColumn[] {
                                this.columnActivityID}, true));
                this.columnActivityID.AllowDBNull = false;
                this.columnActivityID.Unique = true;
            }
            
            public dsw_ActivityRow Newdsw_ActivityRow() {
                return ((dsw_ActivityRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new dsw_ActivityRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(dsw_ActivityRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dsw_ActivityRowChanged != null)) {
                    this.dsw_ActivityRowChanged(this, new dsw_ActivityRowChangeEvent(((dsw_ActivityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dsw_ActivityRowChanging != null)) {
                    this.dsw_ActivityRowChanging(this, new dsw_ActivityRowChangeEvent(((dsw_ActivityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dsw_ActivityRowDeleted != null)) {
                    this.dsw_ActivityRowDeleted(this, new dsw_ActivityRowChangeEvent(((dsw_ActivityRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dsw_ActivityRowDeleting != null)) {
                    this.dsw_ActivityRowDeleting(this, new dsw_ActivityRowChangeEvent(((dsw_ActivityRow)(e.Row)), e.Action));
                }
            }
            
            public void Removedsw_ActivityRow(dsw_ActivityRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dsw_ActivityRow : DataRow {
            
            private dsw_ActivityDataTable tabledsw_Activity;
            
            internal dsw_ActivityRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledsw_Activity = ((dsw_ActivityDataTable)(this.Table));
            }
            
            public int ActivityID {
                get {
                    return ((int)(this[this.tabledsw_Activity.ActivityIDColumn]));
                }
                set {
                    this[this.tabledsw_Activity.ActivityIDColumn] = value;
                }
            }
            
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tabledsw_Activity.SubjectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.SubjectColumn] = value;
                }
            }
            
            public System.DateTime ResponseBy {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledsw_Activity.ResponseByColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.ResponseByColumn] = value;
                }
            }
            
            public string Severity {
                get {
                    try {
                        return ((string)(this[this.tabledsw_Activity.SeverityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.SeverityColumn] = value;
                }
            }
            
            public System.DateTime AssignedOn {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledsw_Activity.AssignedOnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.AssignedOnColumn] = value;
                }
            }
            
            public string TimeOutForActivity {
                get {
                    try {
                        return ((string)(this[this.tabledsw_Activity.TimeOutForActivityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.TimeOutForActivityColumn] = value;
                }
            }
            
            public int VirtualUserId {
                get {
                    try {
                        return ((int)(this[this.tabledsw_Activity.VirtualUserIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.VirtualUserIdColumn] = value;
                }
            }
            
            public int UserId {
                get {
                    try {
                        return ((int)(this[this.tabledsw_Activity.UserIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsw_Activity.UserIdColumn] = value;
                }
            }
            
            public bool IsSubjectNull() {
                return this.IsNull(this.tabledsw_Activity.SubjectColumn);
            }
            
            public void SetSubjectNull() {
                this[this.tabledsw_Activity.SubjectColumn] = System.Convert.DBNull;
            }
            
            public bool IsResponseByNull() {
                return this.IsNull(this.tabledsw_Activity.ResponseByColumn);
            }
            
            public void SetResponseByNull() {
                this[this.tabledsw_Activity.ResponseByColumn] = System.Convert.DBNull;
            }
            
            public bool IsSeverityNull() {
                return this.IsNull(this.tabledsw_Activity.SeverityColumn);
            }
            
            public void SetSeverityNull() {
                this[this.tabledsw_Activity.SeverityColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssignedOnNull() {
                return this.IsNull(this.tabledsw_Activity.AssignedOnColumn);
            }
            
            public void SetAssignedOnNull() {
                this[this.tabledsw_Activity.AssignedOnColumn] = System.Convert.DBNull;
            }
            
            public bool IsTimeOutForActivityNull() {
                return this.IsNull(this.tabledsw_Activity.TimeOutForActivityColumn);
            }
            
            public void SetTimeOutForActivityNull() {
                this[this.tabledsw_Activity.TimeOutForActivityColumn] = System.Convert.DBNull;
            }
            
            public bool IsVirtualUserIdNull() {
                return this.IsNull(this.tabledsw_Activity.VirtualUserIdColumn);
            }
            
            public void SetVirtualUserIdNull() {
                this[this.tabledsw_Activity.VirtualUserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIdNull() {
                return this.IsNull(this.tabledsw_Activity.UserIdColumn);
            }
            
            public void SetUserIdNull() {
                this[this.tabledsw_Activity.UserIdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class dsw_ActivityRowChangeEvent : EventArgs {
            
            private dsw_ActivityRow eventRow;
            
            private DataRowAction eventAction;
            
            public dsw_ActivityRowChangeEvent(dsw_ActivityRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public dsw_ActivityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
