//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GASystem.DataModel {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("HazardDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class HazardDS : global::System.Data.DataSet {
        
        private GAHazardIdentificationDataTable tableGAHazardIdentification;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HazardDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected HazardDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GAHazardIdentification"] != null)) {
                    base.Tables.Add(new GAHazardIdentificationDataTable(ds.Tables["GAHazardIdentification"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GAHazardIdentificationDataTable GAHazardIdentification {
            get {
                return this.tableGAHazardIdentification;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            HazardDS cln = ((HazardDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GAHazardIdentification"] != null)) {
                    base.Tables.Add(new GAHazardIdentificationDataTable(ds.Tables["GAHazardIdentification"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGAHazardIdentification = ((GAHazardIdentificationDataTable)(base.Tables["GAHazardIdentification"]));
            if ((initTable == true)) {
                if ((this.tableGAHazardIdentification != null)) {
                    this.tableGAHazardIdentification.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "HazardDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/HazardDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGAHazardIdentification = new GAHazardIdentificationDataTable();
            base.Tables.Add(this.tableGAHazardIdentification);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGAHazardIdentification() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            HazardDS ds = new HazardDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GAHazardIdentificationRowChangeEventHandler(object sender, GAHazardIdentificationRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GAHazardIdentificationDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnHazardReferenceId;
            
            private global::System.Data.DataColumn columnHazardIdentificationRowId;
            
            private global::System.Data.DataColumn columnLocationOfWork;
            
            private global::System.Data.DataColumn columnWorkArea;
            
            private global::System.Data.DataColumn columnIdentifiedDate;
            
            private global::System.Data.DataColumn columnIdentifiedTime;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnImmediateCorrectiveAction;
            
            private global::System.Data.DataColumn columnRiskEvaluation;
            
            private global::System.Data.DataColumn columnPotential;
            
            private global::System.Data.DataColumn columnSeverity;
            
            private global::System.Data.DataColumn columnSeverityPeople;
            
            private global::System.Data.DataColumn columnSeverityAssets;
            
            private global::System.Data.DataColumn columnSeverityEnvironment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationDataTable() {
                this.TableName = "GAHazardIdentification";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GAHazardIdentificationDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GAHazardIdentificationDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HazardReferenceIdColumn {
                get {
                    return this.columnHazardReferenceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HazardIdentificationRowIdColumn {
                get {
                    return this.columnHazardIdentificationRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationOfWorkColumn {
                get {
                    return this.columnLocationOfWork;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WorkAreaColumn {
                get {
                    return this.columnWorkArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdentifiedDateColumn {
                get {
                    return this.columnIdentifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdentifiedTimeColumn {
                get {
                    return this.columnIdentifiedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImmediateCorrectiveActionColumn {
                get {
                    return this.columnImmediateCorrectiveAction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RiskEvaluationColumn {
                get {
                    return this.columnRiskEvaluation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PotentialColumn {
                get {
                    return this.columnPotential;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeverityColumn {
                get {
                    return this.columnSeverity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeverityPeopleColumn {
                get {
                    return this.columnSeverityPeople;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeverityAssetsColumn {
                get {
                    return this.columnSeverityAssets;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeverityEnvironmentColumn {
                get {
                    return this.columnSeverityEnvironment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRow this[int index] {
                get {
                    return ((GAHazardIdentificationRow)(this.Rows[index]));
                }
            }
            
            public event GAHazardIdentificationRowChangeEventHandler GAHazardIdentificationRowChanging;
            
            public event GAHazardIdentificationRowChangeEventHandler GAHazardIdentificationRowChanged;
            
            public event GAHazardIdentificationRowChangeEventHandler GAHazardIdentificationRowDeleting;
            
            public event GAHazardIdentificationRowChangeEventHandler GAHazardIdentificationRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGAHazardIdentificationRow(GAHazardIdentificationRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRow AddGAHazardIdentificationRow(string HazardReferenceId, string LocationOfWork, string WorkArea, System.DateTime IdentifiedDate, System.DateTime IdentifiedTime, string Description, string ImmediateCorrectiveAction, string RiskEvaluation, string Potential, string Severity, string SeverityPeople, string SeverityAssets, string SeverityEnvironment) {
                GAHazardIdentificationRow rowGAHazardIdentificationRow = ((GAHazardIdentificationRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        HazardReferenceId,
                        null,
                        LocationOfWork,
                        WorkArea,
                        IdentifiedDate,
                        IdentifiedTime,
                        Description,
                        ImmediateCorrectiveAction,
                        RiskEvaluation,
                        Potential,
                        Severity,
                        SeverityPeople,
                        SeverityAssets,
                        SeverityEnvironment};
                rowGAHazardIdentificationRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGAHazardIdentificationRow);
                return rowGAHazardIdentificationRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRow FindByHazardIdentificationRowId(int HazardIdentificationRowId) {
                return ((GAHazardIdentificationRow)(this.Rows.Find(new object[] {
                            HazardIdentificationRowId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GAHazardIdentificationDataTable cln = ((GAHazardIdentificationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GAHazardIdentificationDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnHazardReferenceId = base.Columns["HazardReferenceId"];
                this.columnHazardIdentificationRowId = base.Columns["HazardIdentificationRowId"];
                this.columnLocationOfWork = base.Columns["LocationOfWork"];
                this.columnWorkArea = base.Columns["WorkArea"];
                this.columnIdentifiedDate = base.Columns["IdentifiedDate"];
                this.columnIdentifiedTime = base.Columns["IdentifiedTime"];
                this.columnDescription = base.Columns["Description"];
                this.columnImmediateCorrectiveAction = base.Columns["ImmediateCorrectiveAction"];
                this.columnRiskEvaluation = base.Columns["RiskEvaluation"];
                this.columnPotential = base.Columns["Potential"];
                this.columnSeverity = base.Columns["Severity"];
                this.columnSeverityPeople = base.Columns["SeverityPeople"];
                this.columnSeverityAssets = base.Columns["SeverityAssets"];
                this.columnSeverityEnvironment = base.Columns["SeverityEnvironment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnHazardReferenceId = new global::System.Data.DataColumn("HazardReferenceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHazardReferenceId);
                this.columnHazardIdentificationRowId = new global::System.Data.DataColumn("HazardIdentificationRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHazardIdentificationRowId);
                this.columnLocationOfWork = new global::System.Data.DataColumn("LocationOfWork", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationOfWork);
                this.columnWorkArea = new global::System.Data.DataColumn("WorkArea", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorkArea);
                this.columnIdentifiedDate = new global::System.Data.DataColumn("IdentifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentifiedDate);
                this.columnIdentifiedTime = new global::System.Data.DataColumn("IdentifiedTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentifiedTime);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnImmediateCorrectiveAction = new global::System.Data.DataColumn("ImmediateCorrectiveAction", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImmediateCorrectiveAction);
                this.columnRiskEvaluation = new global::System.Data.DataColumn("RiskEvaluation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRiskEvaluation);
                this.columnPotential = new global::System.Data.DataColumn("Potential", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPotential);
                this.columnSeverity = new global::System.Data.DataColumn("Severity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeverity);
                this.columnSeverityPeople = new global::System.Data.DataColumn("SeverityPeople", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeverityPeople);
                this.columnSeverityAssets = new global::System.Data.DataColumn("SeverityAssets", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeverityAssets);
                this.columnSeverityEnvironment = new global::System.Data.DataColumn("SeverityEnvironment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeverityEnvironment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("HazardDSKey1", new global::System.Data.DataColumn[] {
                                this.columnHazardIdentificationRowId}, true));
                this.columnHazardIdentificationRowId.AutoIncrement = true;
                this.columnHazardIdentificationRowId.AllowDBNull = false;
                this.columnHazardIdentificationRowId.ReadOnly = true;
                this.columnHazardIdentificationRowId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRow NewGAHazardIdentificationRow() {
                return ((GAHazardIdentificationRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GAHazardIdentificationRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GAHazardIdentificationRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GAHazardIdentificationRowChanged != null)) {
                    this.GAHazardIdentificationRowChanged(this, new GAHazardIdentificationRowChangeEvent(((GAHazardIdentificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GAHazardIdentificationRowChanging != null)) {
                    this.GAHazardIdentificationRowChanging(this, new GAHazardIdentificationRowChangeEvent(((GAHazardIdentificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GAHazardIdentificationRowDeleted != null)) {
                    this.GAHazardIdentificationRowDeleted(this, new GAHazardIdentificationRowChangeEvent(((GAHazardIdentificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GAHazardIdentificationRowDeleting != null)) {
                    this.GAHazardIdentificationRowDeleting(this, new GAHazardIdentificationRowChangeEvent(((GAHazardIdentificationRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGAHazardIdentificationRow(GAHazardIdentificationRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                HazardDS ds = new HazardDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GAHazardIdentificationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GAHazardIdentificationRow : global::System.Data.DataRow {
            
            private GAHazardIdentificationDataTable tableGAHazardIdentification;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GAHazardIdentificationRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGAHazardIdentification = ((GAHazardIdentificationDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HazardReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.HazardReferenceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HazardReferenceId\' in table \'GAHazardIdentification\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.HazardReferenceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HazardIdentificationRowId {
                get {
                    return ((int)(this[this.tableGAHazardIdentification.HazardIdentificationRowIdColumn]));
                }
                set {
                    this[this.tableGAHazardIdentification.HazardIdentificationRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationOfWork {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.LocationOfWorkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationOfWork\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.LocationOfWorkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WorkArea {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.WorkAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WorkArea\' in table \'GAHazardIdentification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.WorkAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IdentifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAHazardIdentification.IdentifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdentifiedDate\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.IdentifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime IdentifiedTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAHazardIdentification.IdentifiedTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IdentifiedTime\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.IdentifiedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'GAHazardIdentification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImmediateCorrectiveAction {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.ImmediateCorrectiveActionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImmediateCorrectiveAction\' in table \'GAHazardIdentification" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.ImmediateCorrectiveActionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RiskEvaluation {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.RiskEvaluationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RiskEvaluation\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.RiskEvaluationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Potential {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.PotentialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Potential\' in table \'GAHazardIdentification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.PotentialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Severity {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.SeverityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Severity\' in table \'GAHazardIdentification\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.SeverityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeverityPeople {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.SeverityPeopleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeverityPeople\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.SeverityPeopleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeverityAssets {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.SeverityAssetsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeverityAssets\' in table \'GAHazardIdentification\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.SeverityAssetsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeverityEnvironment {
                get {
                    try {
                        return ((string)(this[this.tableGAHazardIdentification.SeverityEnvironmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeverityEnvironment\' in table \'GAHazardIdentification\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGAHazardIdentification.SeverityEnvironmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHazardReferenceIdNull() {
                return this.IsNull(this.tableGAHazardIdentification.HazardReferenceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHazardReferenceIdNull() {
                this[this.tableGAHazardIdentification.HazardReferenceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationOfWorkNull() {
                return this.IsNull(this.tableGAHazardIdentification.LocationOfWorkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationOfWorkNull() {
                this[this.tableGAHazardIdentification.LocationOfWorkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkAreaNull() {
                return this.IsNull(this.tableGAHazardIdentification.WorkAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWorkAreaNull() {
                this[this.tableGAHazardIdentification.WorkAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentifiedDateNull() {
                return this.IsNull(this.tableGAHazardIdentification.IdentifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentifiedDateNull() {
                this[this.tableGAHazardIdentification.IdentifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentifiedTimeNull() {
                return this.IsNull(this.tableGAHazardIdentification.IdentifiedTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentifiedTimeNull() {
                this[this.tableGAHazardIdentification.IdentifiedTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableGAHazardIdentification.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableGAHazardIdentification.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImmediateCorrectiveActionNull() {
                return this.IsNull(this.tableGAHazardIdentification.ImmediateCorrectiveActionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImmediateCorrectiveActionNull() {
                this[this.tableGAHazardIdentification.ImmediateCorrectiveActionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRiskEvaluationNull() {
                return this.IsNull(this.tableGAHazardIdentification.RiskEvaluationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRiskEvaluationNull() {
                this[this.tableGAHazardIdentification.RiskEvaluationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPotentialNull() {
                return this.IsNull(this.tableGAHazardIdentification.PotentialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPotentialNull() {
                this[this.tableGAHazardIdentification.PotentialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeverityNull() {
                return this.IsNull(this.tableGAHazardIdentification.SeverityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeverityNull() {
                this[this.tableGAHazardIdentification.SeverityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeverityPeopleNull() {
                return this.IsNull(this.tableGAHazardIdentification.SeverityPeopleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeverityPeopleNull() {
                this[this.tableGAHazardIdentification.SeverityPeopleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeverityAssetsNull() {
                return this.IsNull(this.tableGAHazardIdentification.SeverityAssetsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeverityAssetsNull() {
                this[this.tableGAHazardIdentification.SeverityAssetsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeverityEnvironmentNull() {
                return this.IsNull(this.tableGAHazardIdentification.SeverityEnvironmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeverityEnvironmentNull() {
                this[this.tableGAHazardIdentification.SeverityEnvironmentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GAHazardIdentificationRowChangeEvent : global::System.EventArgs {
            
            private GAHazardIdentificationRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRowChangeEvent(GAHazardIdentificationRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAHazardIdentificationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591