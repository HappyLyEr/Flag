//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GASystem.DataModel {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ionPermitToWorkDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ionPermitToWorkDS : global::System.Data.DataSet {
        
        private GAionPermitToWorkDataTable tableGAionPermitToWork;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ionPermitToWorkDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ionPermitToWorkDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GAionPermitToWork"] != null)) {
                    base.Tables.Add(new GAionPermitToWorkDataTable(ds.Tables["GAionPermitToWork"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GAionPermitToWorkDataTable GAionPermitToWork {
            get {
                return this.tableGAionPermitToWork;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ionPermitToWorkDS cln = ((ionPermitToWorkDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GAionPermitToWork"] != null)) {
                    base.Tables.Add(new GAionPermitToWorkDataTable(ds.Tables["GAionPermitToWork"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGAionPermitToWork = ((GAionPermitToWorkDataTable)(base.Tables["GAionPermitToWork"]));
            if ((initTable == true)) {
                if ((this.tableGAionPermitToWork != null)) {
                    this.tableGAionPermitToWork.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ionPermitToWorkDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ionPermitToWorkDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGAionPermitToWork = new GAionPermitToWorkDataTable();
            base.Tables.Add(this.tableGAionPermitToWork);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGAionPermitToWork() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ionPermitToWorkDS ds = new ionPermitToWorkDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GAionPermitToWorkRowChangeEventHandler(object sender, GAionPermitToWorkRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GAionPermitToWorkDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnionPermitToWorkRowId;
            
            private global::System.Data.DataColumn columnReferenceId;
            
            private global::System.Data.DataColumn columnDatePermitAuthorized;
            
            private global::System.Data.DataColumn columnPermitTypeListsRowId;
            
            private global::System.Data.DataColumn columnPermitNumber;
            
            private global::System.Data.DataColumn columnRequestedByPersonnelRowId;
            
            private global::System.Data.DataColumn columnNatureOfWorkscope;
            
            private global::System.Data.DataColumn columnPreciseLocationOfWorkscope;
            
            private global::System.Data.DataColumn columnTRA;
            
            private global::System.Data.DataColumn columnLWITWI;
            
            private global::System.Data.DataColumn columnTHSA;
            
            private global::System.Data.DataColumn columnLiftPlan;
            
            private global::System.Data.DataColumn columnRescuePlan;
            
            private global::System.Data.DataColumn columnToolboxTalk;
            
            private global::System.Data.DataColumn columnIsIsolationRequired;
            
            private global::System.Data.DataColumn columnIsolationTypeListsRowId;
            
            private global::System.Data.DataColumn columnIsolationCertificateNumber;
            
            private global::System.Data.DataColumn columnIsolationInstalledByPersonnelRowId;
            
            private global::System.Data.DataColumn columnIsGasDetectionRequired;
            
            private global::System.Data.DataColumn columnGasDetectionConductedByPersonnelRowId;
            
            private global::System.Data.DataColumn columnGasDetectionEquipment;
            
            private global::System.Data.DataColumn columnGasDetectionResultsHydrocarbons;
            
            private global::System.Data.DataColumn columnGasDetectionResultsOxygen;
            
            private global::System.Data.DataColumn columnGasDetectionResultsH2S;
            
            private global::System.Data.DataColumn columnGasDetectionResultsToxic;
            
            private global::System.Data.DataColumn columnIsContinuousTestingRequired;
            
            private global::System.Data.DataColumn columnPermitOpenedDateTime;
            
            private global::System.Data.DataColumn columnIsWorkCompleted;
            
            private global::System.Data.DataColumn columnIsPermitExtensionRequired;
            
            private global::System.Data.DataColumn columnPermitExtensionTimeFrom;
            
            private global::System.Data.DataColumn columnPermitExtensionTimeTo;
            
            private global::System.Data.DataColumn columnReasonForExtension;
            
            private global::System.Data.DataColumn columnIsNormalOperationsMayResume;
            
            private global::System.Data.DataColumn columnPermitClosedDateTime;
            
            private global::System.Data.DataColumn columnPermitUserPersonnelRowId;
            
            private global::System.Data.DataColumn columnPermitControllerPersonnelRowId;
            
            private global::System.Data.DataColumn columnAreaAuthorityRowId;
            
            private global::System.Data.DataColumn columnPermitAuthorizingIndividualPersonnelRowId;
            
            private global::System.Data.DataColumn columnIsPermitAudited;
            
            private global::System.Data.DataColumn columnVerticalListsRowId;
            
            private global::System.Data.DataColumn columnMimetype;
            
            private global::System.Data.DataColumn columnurl;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnDateCreated;
            
            private global::System.Data.DataColumn columnMasterRowId;
            
            private global::System.Data.DataColumn columnDateChanged;
            
            private global::System.Data.DataColumn columnChangedBy;
            
            private global::System.Data.DataColumn columnDateDeleted;
            
            private global::System.Data.DataColumn columnDeletedBy;
            
            private global::System.Data.DataColumn columnSwitchFree1;
            
            private global::System.Data.DataColumn columnSwitchFree2;
            
            private global::System.Data.DataColumn columnSwitchFree3;
            
            private global::System.Data.DataColumn columnDateTimeFree1;
            
            private global::System.Data.DataColumn columnDateTimeFree2;
            
            private global::System.Data.DataColumn columnDateTimeFree3;
            
            private global::System.Data.DataColumn columnTextFree1;
            
            private global::System.Data.DataColumn columnTextFree2;
            
            private global::System.Data.DataColumn columnTextFree3;
            
            private global::System.Data.DataColumn columnIntFree1;
            
            private global::System.Data.DataColumn columnIntFree2;
            
            private global::System.Data.DataColumn columnIntFree3;
            
            private global::System.Data.DataColumn columnnTextFree1;
            
            private global::System.Data.DataColumn columnnTextFree2;
            
            private global::System.Data.DataColumn columnnTextFree3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkDataTable() {
                this.TableName = "GAionPermitToWork";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GAionPermitToWorkDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GAionPermitToWorkDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ionPermitToWorkRowIdColumn {
                get {
                    return this.columnionPermitToWorkRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceIdColumn {
                get {
                    return this.columnReferenceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatePermitAuthorizedColumn {
                get {
                    return this.columnDatePermitAuthorized;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitTypeListsRowIdColumn {
                get {
                    return this.columnPermitTypeListsRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitNumberColumn {
                get {
                    return this.columnPermitNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedByPersonnelRowIdColumn {
                get {
                    return this.columnRequestedByPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NatureOfWorkscopeColumn {
                get {
                    return this.columnNatureOfWorkscope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreciseLocationOfWorkscopeColumn {
                get {
                    return this.columnPreciseLocationOfWorkscope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRAColumn {
                get {
                    return this.columnTRA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LWITWIColumn {
                get {
                    return this.columnLWITWI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn THSAColumn {
                get {
                    return this.columnTHSA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LiftPlanColumn {
                get {
                    return this.columnLiftPlan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RescuePlanColumn {
                get {
                    return this.columnRescuePlan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToolboxTalkColumn {
                get {
                    return this.columnToolboxTalk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsIsolationRequiredColumn {
                get {
                    return this.columnIsIsolationRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsolationTypeListsRowIdColumn {
                get {
                    return this.columnIsolationTypeListsRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsolationCertificateNumberColumn {
                get {
                    return this.columnIsolationCertificateNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsolationInstalledByPersonnelRowIdColumn {
                get {
                    return this.columnIsolationInstalledByPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsGasDetectionRequiredColumn {
                get {
                    return this.columnIsGasDetectionRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionConductedByPersonnelRowIdColumn {
                get {
                    return this.columnGasDetectionConductedByPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionEquipmentColumn {
                get {
                    return this.columnGasDetectionEquipment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionResultsHydrocarbonsColumn {
                get {
                    return this.columnGasDetectionResultsHydrocarbons;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionResultsOxygenColumn {
                get {
                    return this.columnGasDetectionResultsOxygen;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionResultsH2SColumn {
                get {
                    return this.columnGasDetectionResultsH2S;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GasDetectionResultsToxicColumn {
                get {
                    return this.columnGasDetectionResultsToxic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsContinuousTestingRequiredColumn {
                get {
                    return this.columnIsContinuousTestingRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitOpenedDateTimeColumn {
                get {
                    return this.columnPermitOpenedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsWorkCompletedColumn {
                get {
                    return this.columnIsWorkCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermitExtensionRequiredColumn {
                get {
                    return this.columnIsPermitExtensionRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitExtensionTimeFromColumn {
                get {
                    return this.columnPermitExtensionTimeFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitExtensionTimeToColumn {
                get {
                    return this.columnPermitExtensionTimeTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonForExtensionColumn {
                get {
                    return this.columnReasonForExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNormalOperationsMayResumeColumn {
                get {
                    return this.columnIsNormalOperationsMayResume;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitClosedDateTimeColumn {
                get {
                    return this.columnPermitClosedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitUserPersonnelRowIdColumn {
                get {
                    return this.columnPermitUserPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitControllerPersonnelRowIdColumn {
                get {
                    return this.columnPermitControllerPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaAuthorityRowIdColumn {
                get {
                    return this.columnAreaAuthorityRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermitAuthorizingIndividualPersonnelRowIdColumn {
                get {
                    return this.columnPermitAuthorizingIndividualPersonnelRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPermitAuditedColumn {
                get {
                    return this.columnIsPermitAudited;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VerticalListsRowIdColumn {
                get {
                    return this.columnVerticalListsRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MimetypeColumn {
                get {
                    return this.columnMimetype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateCreatedColumn {
                get {
                    return this.columnDateCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MasterRowIdColumn {
                get {
                    return this.columnMasterRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateChangedColumn {
                get {
                    return this.columnDateChanged;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChangedByColumn {
                get {
                    return this.columnChangedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateDeletedColumn {
                get {
                    return this.columnDateDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeletedByColumn {
                get {
                    return this.columnDeletedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree1Column {
                get {
                    return this.columnSwitchFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree2Column {
                get {
                    return this.columnSwitchFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree3Column {
                get {
                    return this.columnSwitchFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeFree1Column {
                get {
                    return this.columnDateTimeFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeFree2Column {
                get {
                    return this.columnDateTimeFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateTimeFree3Column {
                get {
                    return this.columnDateTimeFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextFree1Column {
                get {
                    return this.columnTextFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextFree2Column {
                get {
                    return this.columnTextFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextFree3Column {
                get {
                    return this.columnTextFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntFree1Column {
                get {
                    return this.columnIntFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntFree2Column {
                get {
                    return this.columnIntFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntFree3Column {
                get {
                    return this.columnIntFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTextFree1Column {
                get {
                    return this.columnnTextFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTextFree2Column {
                get {
                    return this.columnnTextFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTextFree3Column {
                get {
                    return this.columnnTextFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRow this[int index] {
                get {
                    return ((GAionPermitToWorkRow)(this.Rows[index]));
                }
            }
            
            public event GAionPermitToWorkRowChangeEventHandler GAionPermitToWorkRowChanging;
            
            public event GAionPermitToWorkRowChangeEventHandler GAionPermitToWorkRowChanged;
            
            public event GAionPermitToWorkRowChangeEventHandler GAionPermitToWorkRowDeleting;
            
            public event GAionPermitToWorkRowChangeEventHandler GAionPermitToWorkRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGAionPermitToWorkRow(GAionPermitToWorkRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRow AddGAionPermitToWorkRow(
                        string ReferenceId, 
                        System.DateTime DatePermitAuthorized, 
                        int PermitTypeListsRowId, 
                        string PermitNumber, 
                        int RequestedByPersonnelRowId, 
                        string NatureOfWorkscope, 
                        string PreciseLocationOfWorkscope, 
                        string TRA, 
                        string LWITWI, 
                        string THSA, 
                        string LiftPlan, 
                        string RescuePlan, 
                        string ToolboxTalk, 
                        bool IsIsolationRequired, 
                        int IsolationTypeListsRowId, 
                        string IsolationCertificateNumber, 
                        int IsolationInstalledByPersonnelRowId, 
                        bool IsGasDetectionRequired, 
                        int GasDetectionConductedByPersonnelRowId, 
                        string GasDetectionEquipment, 
                        string GasDetectionResultsHydrocarbons, 
                        string GasDetectionResultsOxygen, 
                        string GasDetectionResultsH2S, 
                        string GasDetectionResultsToxic, 
                        bool IsContinuousTestingRequired, 
                        System.DateTime PermitOpenedDateTime, 
                        bool IsWorkCompleted, 
                        bool IsPermitExtensionRequired, 
                        System.DateTime PermitExtensionTimeFrom, 
                        System.DateTime PermitExtensionTimeTo, 
                        string ReasonForExtension, 
                        bool IsNormalOperationsMayResume, 
                        System.DateTime PermitClosedDateTime, 
                        int PermitUserPersonnelRowId, 
                        int PermitControllerPersonnelRowId, 
                        int AreaAuthorityRowId, 
                        int PermitAuthorizingIndividualPersonnelRowId, 
                        bool IsPermitAudited, 
                        int VerticalListsRowId, 
                        string Mimetype, 
                        string url, 
                        string Comment, 
                        int CreatedBy, 
                        System.DateTime DateCreated, 
                        int MasterRowId, 
                        System.DateTime DateChanged, 
                        int ChangedBy, 
                        System.DateTime DateDeleted, 
                        int DeletedBy, 
                        bool SwitchFree1, 
                        bool SwitchFree2, 
                        bool SwitchFree3, 
                        System.DateTime DateTimeFree1, 
                        System.DateTime DateTimeFree2, 
                        System.DateTime DateTimeFree3, 
                        string TextFree1, 
                        string TextFree2, 
                        string TextFree3, 
                        int IntFree1, 
                        int IntFree2, 
                        int IntFree3, 
                        string nTextFree1, 
                        string nTextFree2, 
                        string nTextFree3) {
                GAionPermitToWorkRow rowGAionPermitToWorkRow = ((GAionPermitToWorkRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ReferenceId,
                        DatePermitAuthorized,
                        PermitTypeListsRowId,
                        PermitNumber,
                        RequestedByPersonnelRowId,
                        NatureOfWorkscope,
                        PreciseLocationOfWorkscope,
                        TRA,
                        LWITWI,
                        THSA,
                        LiftPlan,
                        RescuePlan,
                        ToolboxTalk,
                        IsIsolationRequired,
                        IsolationTypeListsRowId,
                        IsolationCertificateNumber,
                        IsolationInstalledByPersonnelRowId,
                        IsGasDetectionRequired,
                        GasDetectionConductedByPersonnelRowId,
                        GasDetectionEquipment,
                        GasDetectionResultsHydrocarbons,
                        GasDetectionResultsOxygen,
                        GasDetectionResultsH2S,
                        GasDetectionResultsToxic,
                        IsContinuousTestingRequired,
                        PermitOpenedDateTime,
                        IsWorkCompleted,
                        IsPermitExtensionRequired,
                        PermitExtensionTimeFrom,
                        PermitExtensionTimeTo,
                        ReasonForExtension,
                        IsNormalOperationsMayResume,
                        PermitClosedDateTime,
                        PermitUserPersonnelRowId,
                        PermitControllerPersonnelRowId,
                        AreaAuthorityRowId,
                        PermitAuthorizingIndividualPersonnelRowId,
                        IsPermitAudited,
                        VerticalListsRowId,
                        Mimetype,
                        url,
                        Comment,
                        CreatedBy,
                        DateCreated,
                        MasterRowId,
                        DateChanged,
                        ChangedBy,
                        DateDeleted,
                        DeletedBy,
                        SwitchFree1,
                        SwitchFree2,
                        SwitchFree3,
                        DateTimeFree1,
                        DateTimeFree2,
                        DateTimeFree3,
                        TextFree1,
                        TextFree2,
                        TextFree3,
                        IntFree1,
                        IntFree2,
                        IntFree3,
                        nTextFree1,
                        nTextFree2,
                        nTextFree3};
                rowGAionPermitToWorkRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGAionPermitToWorkRow);
                return rowGAionPermitToWorkRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRow FindByionPermitToWorkRowId(int ionPermitToWorkRowId) {
                return ((GAionPermitToWorkRow)(this.Rows.Find(new object[] {
                            ionPermitToWorkRowId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GAionPermitToWorkDataTable cln = ((GAionPermitToWorkDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GAionPermitToWorkDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnionPermitToWorkRowId = base.Columns["ionPermitToWorkRowId"];
                this.columnReferenceId = base.Columns["ReferenceId"];
                this.columnDatePermitAuthorized = base.Columns["DatePermitAuthorized"];
                this.columnPermitTypeListsRowId = base.Columns["PermitTypeListsRowId"];
                this.columnPermitNumber = base.Columns["PermitNumber"];
                this.columnRequestedByPersonnelRowId = base.Columns["RequestedByPersonnelRowId"];
                this.columnNatureOfWorkscope = base.Columns["NatureOfWorkscope"];
                this.columnPreciseLocationOfWorkscope = base.Columns["PreciseLocationOfWorkscope"];
                this.columnTRA = base.Columns["TRA"];
                this.columnLWITWI = base.Columns["LWITWI"];
                this.columnTHSA = base.Columns["THSA"];
                this.columnLiftPlan = base.Columns["LiftPlan"];
                this.columnRescuePlan = base.Columns["RescuePlan"];
                this.columnToolboxTalk = base.Columns["ToolboxTalk"];
                this.columnIsIsolationRequired = base.Columns["IsIsolationRequired"];
                this.columnIsolationTypeListsRowId = base.Columns["IsolationTypeListsRowId"];
                this.columnIsolationCertificateNumber = base.Columns["IsolationCertificateNumber"];
                this.columnIsolationInstalledByPersonnelRowId = base.Columns["IsolationInstalledByPersonnelRowId"];
                this.columnIsGasDetectionRequired = base.Columns["IsGasDetectionRequired"];
                this.columnGasDetectionConductedByPersonnelRowId = base.Columns["GasDetectionConductedByPersonnelRowId"];
                this.columnGasDetectionEquipment = base.Columns["GasDetectionEquipment"];
                this.columnGasDetectionResultsHydrocarbons = base.Columns["GasDetectionResultsHydrocarbons"];
                this.columnGasDetectionResultsOxygen = base.Columns["GasDetectionResultsOxygen"];
                this.columnGasDetectionResultsH2S = base.Columns["GasDetectionResultsH2S"];
                this.columnGasDetectionResultsToxic = base.Columns["GasDetectionResultsToxic"];
                this.columnIsContinuousTestingRequired = base.Columns["IsContinuousTestingRequired"];
                this.columnPermitOpenedDateTime = base.Columns["PermitOpenedDateTime"];
                this.columnIsWorkCompleted = base.Columns["IsWorkCompleted"];
                this.columnIsPermitExtensionRequired = base.Columns["IsPermitExtensionRequired"];
                this.columnPermitExtensionTimeFrom = base.Columns["PermitExtensionTimeFrom"];
                this.columnPermitExtensionTimeTo = base.Columns["PermitExtensionTimeTo"];
                this.columnReasonForExtension = base.Columns["ReasonForExtension"];
                this.columnIsNormalOperationsMayResume = base.Columns["IsNormalOperationsMayResume"];
                this.columnPermitClosedDateTime = base.Columns["PermitClosedDateTime"];
                this.columnPermitUserPersonnelRowId = base.Columns["PermitUserPersonnelRowId"];
                this.columnPermitControllerPersonnelRowId = base.Columns["PermitControllerPersonnelRowId"];
                this.columnAreaAuthorityRowId = base.Columns["AreaAuthorityRowId"];
                this.columnPermitAuthorizingIndividualPersonnelRowId = base.Columns["PermitAuthorizingIndividualPersonnelRowId"];
                this.columnIsPermitAudited = base.Columns["IsPermitAudited"];
                this.columnVerticalListsRowId = base.Columns["VerticalListsRowId"];
                this.columnMimetype = base.Columns["Mimetype"];
                this.columnurl = base.Columns["url"];
                this.columnComment = base.Columns["Comment"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnDateCreated = base.Columns["DateCreated"];
                this.columnMasterRowId = base.Columns["MasterRowId"];
                this.columnDateChanged = base.Columns["DateChanged"];
                this.columnChangedBy = base.Columns["ChangedBy"];
                this.columnDateDeleted = base.Columns["DateDeleted"];
                this.columnDeletedBy = base.Columns["DeletedBy"];
                this.columnSwitchFree1 = base.Columns["SwitchFree1"];
                this.columnSwitchFree2 = base.Columns["SwitchFree2"];
                this.columnSwitchFree3 = base.Columns["SwitchFree3"];
                this.columnDateTimeFree1 = base.Columns["DateTimeFree1"];
                this.columnDateTimeFree2 = base.Columns["DateTimeFree2"];
                this.columnDateTimeFree3 = base.Columns["DateTimeFree3"];
                this.columnTextFree1 = base.Columns["TextFree1"];
                this.columnTextFree2 = base.Columns["TextFree2"];
                this.columnTextFree3 = base.Columns["TextFree3"];
                this.columnIntFree1 = base.Columns["IntFree1"];
                this.columnIntFree2 = base.Columns["IntFree2"];
                this.columnIntFree3 = base.Columns["IntFree3"];
                this.columnnTextFree1 = base.Columns["nTextFree1"];
                this.columnnTextFree2 = base.Columns["nTextFree2"];
                this.columnnTextFree3 = base.Columns["nTextFree3"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnionPermitToWorkRowId = new global::System.Data.DataColumn("ionPermitToWorkRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnionPermitToWorkRowId);
                this.columnReferenceId = new global::System.Data.DataColumn("ReferenceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceId);
                this.columnDatePermitAuthorized = new global::System.Data.DataColumn("DatePermitAuthorized", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatePermitAuthorized);
                this.columnPermitTypeListsRowId = new global::System.Data.DataColumn("PermitTypeListsRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitTypeListsRowId);
                this.columnPermitNumber = new global::System.Data.DataColumn("PermitNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitNumber);
                this.columnRequestedByPersonnelRowId = new global::System.Data.DataColumn("RequestedByPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedByPersonnelRowId);
                this.columnNatureOfWorkscope = new global::System.Data.DataColumn("NatureOfWorkscope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNatureOfWorkscope);
                this.columnPreciseLocationOfWorkscope = new global::System.Data.DataColumn("PreciseLocationOfWorkscope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreciseLocationOfWorkscope);
                this.columnTRA = new global::System.Data.DataColumn("TRA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRA);
                this.columnLWITWI = new global::System.Data.DataColumn("LWITWI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLWITWI);
                this.columnTHSA = new global::System.Data.DataColumn("THSA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHSA);
                this.columnLiftPlan = new global::System.Data.DataColumn("LiftPlan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLiftPlan);
                this.columnRescuePlan = new global::System.Data.DataColumn("RescuePlan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRescuePlan);
                this.columnToolboxTalk = new global::System.Data.DataColumn("ToolboxTalk", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToolboxTalk);
                this.columnIsIsolationRequired = new global::System.Data.DataColumn("IsIsolationRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsIsolationRequired);
                this.columnIsolationTypeListsRowId = new global::System.Data.DataColumn("IsolationTypeListsRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsolationTypeListsRowId);
                this.columnIsolationCertificateNumber = new global::System.Data.DataColumn("IsolationCertificateNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsolationCertificateNumber);
                this.columnIsolationInstalledByPersonnelRowId = new global::System.Data.DataColumn("IsolationInstalledByPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsolationInstalledByPersonnelRowId);
                this.columnIsGasDetectionRequired = new global::System.Data.DataColumn("IsGasDetectionRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGasDetectionRequired);
                this.columnGasDetectionConductedByPersonnelRowId = new global::System.Data.DataColumn("GasDetectionConductedByPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionConductedByPersonnelRowId);
                this.columnGasDetectionEquipment = new global::System.Data.DataColumn("GasDetectionEquipment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionEquipment);
                this.columnGasDetectionResultsHydrocarbons = new global::System.Data.DataColumn("GasDetectionResultsHydrocarbons", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionResultsHydrocarbons);
                this.columnGasDetectionResultsOxygen = new global::System.Data.DataColumn("GasDetectionResultsOxygen", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionResultsOxygen);
                this.columnGasDetectionResultsH2S = new global::System.Data.DataColumn("GasDetectionResultsH2S", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionResultsH2S);
                this.columnGasDetectionResultsToxic = new global::System.Data.DataColumn("GasDetectionResultsToxic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGasDetectionResultsToxic);
                this.columnIsContinuousTestingRequired = new global::System.Data.DataColumn("IsContinuousTestingRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsContinuousTestingRequired);
                this.columnPermitOpenedDateTime = new global::System.Data.DataColumn("PermitOpenedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitOpenedDateTime);
                this.columnIsWorkCompleted = new global::System.Data.DataColumn("IsWorkCompleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsWorkCompleted);
                this.columnIsPermitExtensionRequired = new global::System.Data.DataColumn("IsPermitExtensionRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermitExtensionRequired);
                this.columnPermitExtensionTimeFrom = new global::System.Data.DataColumn("PermitExtensionTimeFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitExtensionTimeFrom);
                this.columnPermitExtensionTimeTo = new global::System.Data.DataColumn("PermitExtensionTimeTo", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitExtensionTimeTo);
                this.columnReasonForExtension = new global::System.Data.DataColumn("ReasonForExtension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReasonForExtension);
                this.columnIsNormalOperationsMayResume = new global::System.Data.DataColumn("IsNormalOperationsMayResume", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNormalOperationsMayResume);
                this.columnPermitClosedDateTime = new global::System.Data.DataColumn("PermitClosedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitClosedDateTime);
                this.columnPermitUserPersonnelRowId = new global::System.Data.DataColumn("PermitUserPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitUserPersonnelRowId);
                this.columnPermitControllerPersonnelRowId = new global::System.Data.DataColumn("PermitControllerPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitControllerPersonnelRowId);
                this.columnAreaAuthorityRowId = new global::System.Data.DataColumn("AreaAuthorityRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaAuthorityRowId);
                this.columnPermitAuthorizingIndividualPersonnelRowId = new global::System.Data.DataColumn("PermitAuthorizingIndividualPersonnelRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermitAuthorizingIndividualPersonnelRowId);
                this.columnIsPermitAudited = new global::System.Data.DataColumn("IsPermitAudited", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPermitAudited);
                this.columnVerticalListsRowId = new global::System.Data.DataColumn("VerticalListsRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerticalListsRowId);
                this.columnMimetype = new global::System.Data.DataColumn("Mimetype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMimetype);
                this.columnurl = new global::System.Data.DataColumn("url", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurl);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnDateCreated = new global::System.Data.DataColumn("DateCreated", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateCreated);
                this.columnMasterRowId = new global::System.Data.DataColumn("MasterRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMasterRowId);
                this.columnDateChanged = new global::System.Data.DataColumn("DateChanged", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateChanged);
                this.columnChangedBy = new global::System.Data.DataColumn("ChangedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChangedBy);
                this.columnDateDeleted = new global::System.Data.DataColumn("DateDeleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateDeleted);
                this.columnDeletedBy = new global::System.Data.DataColumn("DeletedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeletedBy);
                this.columnSwitchFree1 = new global::System.Data.DataColumn("SwitchFree1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree1);
                this.columnSwitchFree2 = new global::System.Data.DataColumn("SwitchFree2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree2);
                this.columnSwitchFree3 = new global::System.Data.DataColumn("SwitchFree3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree3);
                this.columnDateTimeFree1 = new global::System.Data.DataColumn("DateTimeFree1", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeFree1);
                this.columnDateTimeFree2 = new global::System.Data.DataColumn("DateTimeFree2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeFree2);
                this.columnDateTimeFree3 = new global::System.Data.DataColumn("DateTimeFree3", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeFree3);
                this.columnTextFree1 = new global::System.Data.DataColumn("TextFree1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextFree1);
                this.columnTextFree2 = new global::System.Data.DataColumn("TextFree2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextFree2);
                this.columnTextFree3 = new global::System.Data.DataColumn("TextFree3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextFree3);
                this.columnIntFree1 = new global::System.Data.DataColumn("IntFree1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntFree1);
                this.columnIntFree2 = new global::System.Data.DataColumn("IntFree2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntFree2);
                this.columnIntFree3 = new global::System.Data.DataColumn("IntFree3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntFree3);
                this.columnnTextFree1 = new global::System.Data.DataColumn("nTextFree1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree1);
                this.columnnTextFree2 = new global::System.Data.DataColumn("nTextFree2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree2);
                this.columnnTextFree3 = new global::System.Data.DataColumn("nTextFree3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree3);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnionPermitToWorkRowId}, true));
                this.columnionPermitToWorkRowId.AutoIncrement = true;
                this.columnionPermitToWorkRowId.AllowDBNull = false;
                this.columnionPermitToWorkRowId.ReadOnly = true;
                this.columnionPermitToWorkRowId.Unique = true;
                this.columnReferenceId.MaxLength = 200;
                this.columnPermitNumber.MaxLength = 100;
                this.columnNatureOfWorkscope.MaxLength = 1073741823;
                this.columnPreciseLocationOfWorkscope.MaxLength = 1073741823;
                this.columnTRA.MaxLength = 200;
                this.columnLWITWI.MaxLength = 200;
                this.columnTHSA.MaxLength = 200;
                this.columnLiftPlan.MaxLength = 200;
                this.columnRescuePlan.MaxLength = 200;
                this.columnToolboxTalk.MaxLength = 200;
                this.columnIsolationCertificateNumber.MaxLength = 200;
                this.columnGasDetectionEquipment.MaxLength = 200;
                this.columnGasDetectionResultsHydrocarbons.MaxLength = 100;
                this.columnGasDetectionResultsOxygen.MaxLength = 100;
                this.columnGasDetectionResultsH2S.MaxLength = 100;
                this.columnGasDetectionResultsToxic.MaxLength = 100;
                this.columnReasonForExtension.MaxLength = 1073741823;
                this.columnMimetype.MaxLength = 400;
                this.columnurl.MaxLength = 400;
                this.columnComment.MaxLength = 1073741823;
                this.columnTextFree1.MaxLength = 200;
                this.columnTextFree2.MaxLength = 200;
                this.columnTextFree3.MaxLength = 200;
                this.columnnTextFree1.MaxLength = 1073741823;
                this.columnnTextFree2.MaxLength = 1073741823;
                this.columnnTextFree3.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRow NewGAionPermitToWorkRow() {
                return ((GAionPermitToWorkRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GAionPermitToWorkRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GAionPermitToWorkRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GAionPermitToWorkRowChanged != null)) {
                    this.GAionPermitToWorkRowChanged(this, new GAionPermitToWorkRowChangeEvent(((GAionPermitToWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GAionPermitToWorkRowChanging != null)) {
                    this.GAionPermitToWorkRowChanging(this, new GAionPermitToWorkRowChangeEvent(((GAionPermitToWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GAionPermitToWorkRowDeleted != null)) {
                    this.GAionPermitToWorkRowDeleted(this, new GAionPermitToWorkRowChangeEvent(((GAionPermitToWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GAionPermitToWorkRowDeleting != null)) {
                    this.GAionPermitToWorkRowDeleting(this, new GAionPermitToWorkRowChangeEvent(((GAionPermitToWorkRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGAionPermitToWorkRow(GAionPermitToWorkRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ionPermitToWorkDS ds = new ionPermitToWorkDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GAionPermitToWorkDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GAionPermitToWorkRow : global::System.Data.DataRow {
            
            private GAionPermitToWorkDataTable tableGAionPermitToWork;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GAionPermitToWorkRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGAionPermitToWork = ((GAionPermitToWorkDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ionPermitToWorkRowId {
                get {
                    return ((int)(this[this.tableGAionPermitToWork.ionPermitToWorkRowIdColumn]));
                }
                set {
                    this[this.tableGAionPermitToWork.ionPermitToWorkRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.ReferenceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceId\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.ReferenceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DatePermitAuthorized {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DatePermitAuthorizedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DatePermitAuthorized\' in table \'GAionPermitToWork\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DatePermitAuthorizedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitTypeListsRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.PermitTypeListsRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitTypeListsRowId\' in table \'GAionPermitToWork\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitTypeListsRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermitNumber {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.PermitNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitNumber\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestedByPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.RequestedByPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestedByPersonnelRowId\' in table \'GAionPermitToWork\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.RequestedByPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NatureOfWorkscope {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.NatureOfWorkscopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NatureOfWorkscope\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.NatureOfWorkscopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreciseLocationOfWorkscope {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.PreciseLocationOfWorkscopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreciseLocationOfWorkscope\' in table \'GAionPermitToWork\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PreciseLocationOfWorkscopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRA {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.TRAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRA\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.TRAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LWITWI {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.LWITWIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LWITWI\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.LWITWIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string THSA {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.THSAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'THSA\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.THSAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LiftPlan {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.LiftPlanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LiftPlan\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.LiftPlanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RescuePlan {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.RescuePlanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RescuePlan\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.RescuePlanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToolboxTalk {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.ToolboxTalkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToolboxTalk\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.ToolboxTalkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsolationRequired {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsIsolationRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsIsolationRequired\' in table \'GAionPermitToWork\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsIsolationRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsolationTypeListsRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.IsolationTypeListsRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsolationTypeListsRowId\' in table \'GAionPermitToWork\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsolationTypeListsRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsolationCertificateNumber {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.IsolationCertificateNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsolationCertificateNumber\' in table \'GAionPermitToWork\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsolationCertificateNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IsolationInstalledByPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.IsolationInstalledByPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsolationInstalledByPersonnelRowId\' in table \'GAionPermitTo" +
                                "Work\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsolationInstalledByPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionRequired {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsGasDetectionRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsGasDetectionRequired\' in table \'GAionPermitToWork\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsGasDetectionRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GasDetectionConductedByPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.GasDetectionConductedByPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionConductedByPersonnelRowId\' in table \'GAionPermi" +
                                "tToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionConductedByPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GasDetectionEquipment {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.GasDetectionEquipmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionEquipment\' in table \'GAionPermitToWork\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionEquipmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GasDetectionResultsHydrocarbons {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.GasDetectionResultsHydrocarbonsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionResultsHydrocarbons\' in table \'GAionPermitToWor" +
                                "k\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionResultsHydrocarbonsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GasDetectionResultsOxygen {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.GasDetectionResultsOxygenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionResultsOxygen\' in table \'GAionPermitToWork\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionResultsOxygenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GasDetectionResultsH2S {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.GasDetectionResultsH2SColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionResultsH2S\' in table \'GAionPermitToWork\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionResultsH2SColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GasDetectionResultsToxic {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.GasDetectionResultsToxicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GasDetectionResultsToxic\' in table \'GAionPermitToWork\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.GasDetectionResultsToxicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContinuousTestingRequired {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsContinuousTestingRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsContinuousTestingRequired\' in table \'GAionPermitToWork\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsContinuousTestingRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PermitOpenedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.PermitOpenedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitOpenedDateTime\' in table \'GAionPermitToWork\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitOpenedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWorkCompleted {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsWorkCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsWorkCompleted\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsWorkCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitExtensionRequired {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsPermitExtensionRequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermitExtensionRequired\' in table \'GAionPermitToWork\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsPermitExtensionRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PermitExtensionTimeFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.PermitExtensionTimeFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitExtensionTimeFrom\' in table \'GAionPermitToWork\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitExtensionTimeFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PermitExtensionTimeTo {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.PermitExtensionTimeToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitExtensionTimeTo\' in table \'GAionPermitToWork\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitExtensionTimeToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReasonForExtension {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.ReasonForExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReasonForExtension\' in table \'GAionPermitToWork\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.ReasonForExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNormalOperationsMayResume {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsNormalOperationsMayResumeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNormalOperationsMayResume\' in table \'GAionPermitToWork\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsNormalOperationsMayResumeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PermitClosedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.PermitClosedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitClosedDateTime\' in table \'GAionPermitToWork\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitClosedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitUserPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.PermitUserPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitUserPersonnelRowId\' in table \'GAionPermitToWork\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitUserPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitControllerPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.PermitControllerPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitControllerPersonnelRowId\' in table \'GAionPermitToWork" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitControllerPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AreaAuthorityRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.AreaAuthorityRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaAuthorityRowId\' in table \'GAionPermitToWork\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.AreaAuthorityRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermitAuthorizingIndividualPersonnelRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.PermitAuthorizingIndividualPersonnelRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermitAuthorizingIndividualPersonnelRowId\' in table \'GAionP" +
                                "ermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.PermitAuthorizingIndividualPersonnelRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitAudited {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.IsPermitAuditedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPermitAudited\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IsPermitAuditedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VerticalListsRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.VerticalListsRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VerticalListsRowId\' in table \'GAionPermitToWork\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.VerticalListsRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mimetype {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.MimetypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mimetype\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.MimetypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string url {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.urlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'url\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreatedBy {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateCreated {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateCreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateCreated\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateCreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MasterRowId {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.MasterRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MasterRowId\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.MasterRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateChanged {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateChangedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateChanged\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateChangedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChangedBy {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.ChangedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChangedBy\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.ChangedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateDeleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateDeleted\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DeletedBy {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.DeletedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeletedBy\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DeletedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree1 {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.SwitchFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree1\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.SwitchFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree2 {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.SwitchFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree2\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.SwitchFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree3 {
                get {
                    try {
                        return ((bool)(this[this.tableGAionPermitToWork.SwitchFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree3\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.SwitchFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTimeFree1 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateTimeFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeFree1\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateTimeFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTimeFree2 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateTimeFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeFree2\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateTimeFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateTimeFree3 {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGAionPermitToWork.DateTimeFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeFree3\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.DateTimeFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextFree1 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.TextFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextFree1\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.TextFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextFree2 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.TextFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextFree2\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.TextFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.TextFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextFree3\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.TextFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IntFree1 {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.IntFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntFree1\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IntFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IntFree2 {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.IntFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntFree2\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IntFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IntFree3 {
                get {
                    try {
                        return ((int)(this[this.tableGAionPermitToWork.IntFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntFree3\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.IntFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree1 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.nTextFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nTextFree1\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.nTextFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree2 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.nTextFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nTextFree2\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.nTextFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGAionPermitToWork.nTextFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nTextFree3\' in table \'GAionPermitToWork\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGAionPermitToWork.nTextFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.ReferenceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceIdNull() {
                this[this.tableGAionPermitToWork.ReferenceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatePermitAuthorizedNull() {
                return this.IsNull(this.tableGAionPermitToWork.DatePermitAuthorizedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatePermitAuthorizedNull() {
                this[this.tableGAionPermitToWork.DatePermitAuthorizedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitTypeListsRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitTypeListsRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitTypeListsRowIdNull() {
                this[this.tableGAionPermitToWork.PermitTypeListsRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitNumberNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitNumberNull() {
                this[this.tableGAionPermitToWork.PermitNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestedByPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.RequestedByPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestedByPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.RequestedByPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNatureOfWorkscopeNull() {
                return this.IsNull(this.tableGAionPermitToWork.NatureOfWorkscopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNatureOfWorkscopeNull() {
                this[this.tableGAionPermitToWork.NatureOfWorkscopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreciseLocationOfWorkscopeNull() {
                return this.IsNull(this.tableGAionPermitToWork.PreciseLocationOfWorkscopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreciseLocationOfWorkscopeNull() {
                this[this.tableGAionPermitToWork.PreciseLocationOfWorkscopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRANull() {
                return this.IsNull(this.tableGAionPermitToWork.TRAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRANull() {
                this[this.tableGAionPermitToWork.TRAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLWITWINull() {
                return this.IsNull(this.tableGAionPermitToWork.LWITWIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLWITWINull() {
                this[this.tableGAionPermitToWork.LWITWIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTHSANull() {
                return this.IsNull(this.tableGAionPermitToWork.THSAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTHSANull() {
                this[this.tableGAionPermitToWork.THSAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLiftPlanNull() {
                return this.IsNull(this.tableGAionPermitToWork.LiftPlanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLiftPlanNull() {
                this[this.tableGAionPermitToWork.LiftPlanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRescuePlanNull() {
                return this.IsNull(this.tableGAionPermitToWork.RescuePlanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRescuePlanNull() {
                this[this.tableGAionPermitToWork.RescuePlanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToolboxTalkNull() {
                return this.IsNull(this.tableGAionPermitToWork.ToolboxTalkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToolboxTalkNull() {
                this[this.tableGAionPermitToWork.ToolboxTalkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsIsolationRequiredNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsIsolationRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsIsolationRequiredNull() {
                this[this.tableGAionPermitToWork.IsIsolationRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsolationTypeListsRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsolationTypeListsRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsolationTypeListsRowIdNull() {
                this[this.tableGAionPermitToWork.IsolationTypeListsRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsolationCertificateNumberNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsolationCertificateNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsolationCertificateNumberNull() {
                this[this.tableGAionPermitToWork.IsolationCertificateNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsolationInstalledByPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsolationInstalledByPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsolationInstalledByPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.IsolationInstalledByPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsGasDetectionRequiredNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsGasDetectionRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsGasDetectionRequiredNull() {
                this[this.tableGAionPermitToWork.IsGasDetectionRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionConductedByPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionConductedByPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionConductedByPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.GasDetectionConductedByPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionEquipmentNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionEquipmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionEquipmentNull() {
                this[this.tableGAionPermitToWork.GasDetectionEquipmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionResultsHydrocarbonsNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionResultsHydrocarbonsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionResultsHydrocarbonsNull() {
                this[this.tableGAionPermitToWork.GasDetectionResultsHydrocarbonsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionResultsOxygenNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionResultsOxygenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionResultsOxygenNull() {
                this[this.tableGAionPermitToWork.GasDetectionResultsOxygenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionResultsH2SNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionResultsH2SColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionResultsH2SNull() {
                this[this.tableGAionPermitToWork.GasDetectionResultsH2SColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGasDetectionResultsToxicNull() {
                return this.IsNull(this.tableGAionPermitToWork.GasDetectionResultsToxicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGasDetectionResultsToxicNull() {
                this[this.tableGAionPermitToWork.GasDetectionResultsToxicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsContinuousTestingRequiredNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsContinuousTestingRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsContinuousTestingRequiredNull() {
                this[this.tableGAionPermitToWork.IsContinuousTestingRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitOpenedDateTimeNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitOpenedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitOpenedDateTimeNull() {
                this[this.tableGAionPermitToWork.PermitOpenedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsWorkCompletedNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsWorkCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsWorkCompletedNull() {
                this[this.tableGAionPermitToWork.IsWorkCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermitExtensionRequiredNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsPermitExtensionRequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermitExtensionRequiredNull() {
                this[this.tableGAionPermitToWork.IsPermitExtensionRequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitExtensionTimeFromNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitExtensionTimeFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitExtensionTimeFromNull() {
                this[this.tableGAionPermitToWork.PermitExtensionTimeFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitExtensionTimeToNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitExtensionTimeToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitExtensionTimeToNull() {
                this[this.tableGAionPermitToWork.PermitExtensionTimeToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonForExtensionNull() {
                return this.IsNull(this.tableGAionPermitToWork.ReasonForExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonForExtensionNull() {
                this[this.tableGAionPermitToWork.ReasonForExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNormalOperationsMayResumeNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsNormalOperationsMayResumeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNormalOperationsMayResumeNull() {
                this[this.tableGAionPermitToWork.IsNormalOperationsMayResumeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitClosedDateTimeNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitClosedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitClosedDateTimeNull() {
                this[this.tableGAionPermitToWork.PermitClosedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitUserPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitUserPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitUserPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.PermitUserPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitControllerPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitControllerPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitControllerPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.PermitControllerPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaAuthorityRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.AreaAuthorityRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaAuthorityRowIdNull() {
                this[this.tableGAionPermitToWork.AreaAuthorityRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermitAuthorizingIndividualPersonnelRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.PermitAuthorizingIndividualPersonnelRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermitAuthorizingIndividualPersonnelRowIdNull() {
                this[this.tableGAionPermitToWork.PermitAuthorizingIndividualPersonnelRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPermitAuditedNull() {
                return this.IsNull(this.tableGAionPermitToWork.IsPermitAuditedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPermitAuditedNull() {
                this[this.tableGAionPermitToWork.IsPermitAuditedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerticalListsRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.VerticalListsRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVerticalListsRowIdNull() {
                this[this.tableGAionPermitToWork.VerticalListsRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMimetypeNull() {
                return this.IsNull(this.tableGAionPermitToWork.MimetypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMimetypeNull() {
                this[this.tableGAionPermitToWork.MimetypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsurlNull() {
                return this.IsNull(this.tableGAionPermitToWork.urlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturlNull() {
                this[this.tableGAionPermitToWork.urlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableGAionPermitToWork.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableGAionPermitToWork.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableGAionPermitToWork.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableGAionPermitToWork.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateCreatedNull() {
                return this.IsNull(this.tableGAionPermitToWork.DateCreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateCreatedNull() {
                this[this.tableGAionPermitToWork.DateCreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMasterRowIdNull() {
                return this.IsNull(this.tableGAionPermitToWork.MasterRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMasterRowIdNull() {
                this[this.tableGAionPermitToWork.MasterRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateChangedNull() {
                return this.IsNull(this.tableGAionPermitToWork.DateChangedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateChangedNull() {
                this[this.tableGAionPermitToWork.DateChangedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChangedByNull() {
                return this.IsNull(this.tableGAionPermitToWork.ChangedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChangedByNull() {
                this[this.tableGAionPermitToWork.ChangedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateDeletedNull() {
                return this.IsNull(this.tableGAionPermitToWork.DateDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateDeletedNull() {
                this[this.tableGAionPermitToWork.DateDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeletedByNull() {
                return this.IsNull(this.tableGAionPermitToWork.DeletedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeletedByNull() {
                this[this.tableGAionPermitToWork.DeletedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree1Null() {
                return this.IsNull(this.tableGAionPermitToWork.SwitchFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree1Null() {
                this[this.tableGAionPermitToWork.SwitchFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree2Null() {
                return this.IsNull(this.tableGAionPermitToWork.SwitchFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree2Null() {
                this[this.tableGAionPermitToWork.SwitchFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree3Null() {
                return this.IsNull(this.tableGAionPermitToWork.SwitchFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree3Null() {
                this[this.tableGAionPermitToWork.SwitchFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeFree1Null() {
                return this.IsNull(this.tableGAionPermitToWork.DateTimeFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeFree1Null() {
                this[this.tableGAionPermitToWork.DateTimeFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeFree2Null() {
                return this.IsNull(this.tableGAionPermitToWork.DateTimeFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeFree2Null() {
                this[this.tableGAionPermitToWork.DateTimeFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateTimeFree3Null() {
                return this.IsNull(this.tableGAionPermitToWork.DateTimeFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateTimeFree3Null() {
                this[this.tableGAionPermitToWork.DateTimeFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextFree1Null() {
                return this.IsNull(this.tableGAionPermitToWork.TextFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextFree1Null() {
                this[this.tableGAionPermitToWork.TextFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextFree2Null() {
                return this.IsNull(this.tableGAionPermitToWork.TextFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextFree2Null() {
                this[this.tableGAionPermitToWork.TextFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextFree3Null() {
                return this.IsNull(this.tableGAionPermitToWork.TextFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextFree3Null() {
                this[this.tableGAionPermitToWork.TextFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntFree1Null() {
                return this.IsNull(this.tableGAionPermitToWork.IntFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntFree1Null() {
                this[this.tableGAionPermitToWork.IntFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntFree2Null() {
                return this.IsNull(this.tableGAionPermitToWork.IntFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntFree2Null() {
                this[this.tableGAionPermitToWork.IntFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntFree3Null() {
                return this.IsNull(this.tableGAionPermitToWork.IntFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntFree3Null() {
                this[this.tableGAionPermitToWork.IntFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree1Null() {
                return this.IsNull(this.tableGAionPermitToWork.nTextFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree1Null() {
                this[this.tableGAionPermitToWork.nTextFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree2Null() {
                return this.IsNull(this.tableGAionPermitToWork.nTextFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree2Null() {
                this[this.tableGAionPermitToWork.nTextFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree3Null() {
                return this.IsNull(this.tableGAionPermitToWork.nTextFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree3Null() {
                this[this.tableGAionPermitToWork.nTextFree3Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GAionPermitToWorkRowChangeEvent : global::System.EventArgs {
            
            private GAionPermitToWorkRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRowChangeEvent(GAionPermitToWorkRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GAionPermitToWorkRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591