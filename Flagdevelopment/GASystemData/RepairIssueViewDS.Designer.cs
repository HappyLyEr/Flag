//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace GASystem.DataModel {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("RepairIssueViewDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class RepairIssueViewDS : global::System.Data.DataSet {
        
        private GARepairIssueViewDataTable tableGARepairIssueView;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RepairIssueViewDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected RepairIssueViewDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["GARepairIssueView"] != null)) {
                    base.Tables.Add(new GARepairIssueViewDataTable(ds.Tables["GARepairIssueView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GARepairIssueViewDataTable GARepairIssueView {
            get {
                return this.tableGARepairIssueView;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            RepairIssueViewDS cln = ((RepairIssueViewDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GARepairIssueView"] != null)) {
                    base.Tables.Add(new GARepairIssueViewDataTable(ds.Tables["GARepairIssueView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGARepairIssueView = ((GARepairIssueViewDataTable)(base.Tables["GARepairIssueView"]));
            if ((initTable == true)) {
                if ((this.tableGARepairIssueView != null)) {
                    this.tableGARepairIssueView.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "RepairIssueViewDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/RepairIssueViewDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGARepairIssueView = new GARepairIssueViewDataTable();
            base.Tables.Add(this.tableGARepairIssueView);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGARepairIssueView() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            RepairIssueViewDS ds = new RepairIssueViewDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void GARepairIssueViewRowChangeEventHandler(object sender, GARepairIssueViewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GARepairIssueViewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRepairIssueViewRowId;
            
            private global::System.Data.DataColumn columnRepairIssueViewReferenceId;
            
            private global::System.Data.DataColumn columnEquipmentId;
            
            private global::System.Data.DataColumn columnRequestedBy;
            
            private global::System.Data.DataColumn columnDateOfFailure;
            
            private global::System.Data.DataColumn columnRepairsNeeded;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnResponsible;
            
            private global::System.Data.DataColumn columnResponsibleRoleListsRowId;
            
            private global::System.Data.DataColumn columnDateRepairCompleted;
            
            private global::System.Data.DataColumn columnLessonsLearned;
            
            private global::System.Data.DataColumn columnnTextFree2;
            
            private global::System.Data.DataColumn columnnTextFree3;
            
            private global::System.Data.DataColumn columnTypeOfEquipment;
            
            private global::System.Data.DataColumn columnTypeOfIssue;
            
            private global::System.Data.DataColumn columnIntFree3;
            
            private global::System.Data.DataColumn columnDateRepairBy;
            
            private global::System.Data.DataColumn columnDatePlannedRepair;
            
            private global::System.Data.DataColumn columnEquipmentSupplier;
            
            private global::System.Data.DataColumn columnRepairedBy;
            
            private global::System.Data.DataColumn columnTextFree3;
            
            private global::System.Data.DataColumn columnSwitchFree1;
            
            private global::System.Data.DataColumn columnSwitchFree2;
            
            private global::System.Data.DataColumn columnSwitchFree3;
            
            private global::System.Data.DataColumn columnDateRepairOrdered;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewDataTable() {
                this.TableName = "GARepairIssueView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GARepairIssueViewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GARepairIssueViewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairIssueViewRowIdColumn {
                get {
                    return this.columnRepairIssueViewRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairIssueViewReferenceIdColumn {
                get {
                    return this.columnRepairIssueViewReferenceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentIdColumn {
                get {
                    return this.columnEquipmentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestedByColumn {
                get {
                    return this.columnRequestedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOfFailureColumn {
                get {
                    return this.columnDateOfFailure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairsNeededColumn {
                get {
                    return this.columnRepairsNeeded;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsibleColumn {
                get {
                    return this.columnResponsible;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponsibleRoleListsRowIdColumn {
                get {
                    return this.columnResponsibleRoleListsRowId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRepairCompletedColumn {
                get {
                    return this.columnDateRepairCompleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LessonsLearnedColumn {
                get {
                    return this.columnLessonsLearned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTextFree2Column {
                get {
                    return this.columnnTextFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nTextFree3Column {
                get {
                    return this.columnnTextFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfEquipmentColumn {
                get {
                    return this.columnTypeOfEquipment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfIssueColumn {
                get {
                    return this.columnTypeOfIssue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntFree3Column {
                get {
                    return this.columnIntFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRepairByColumn {
                get {
                    return this.columnDateRepairBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DatePlannedRepairColumn {
                get {
                    return this.columnDatePlannedRepair;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentSupplierColumn {
                get {
                    return this.columnEquipmentSupplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RepairedByColumn {
                get {
                    return this.columnRepairedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextFree3Column {
                get {
                    return this.columnTextFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree1Column {
                get {
                    return this.columnSwitchFree1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree2Column {
                get {
                    return this.columnSwitchFree2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SwitchFree3Column {
                get {
                    return this.columnSwitchFree3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRepairOrderedColumn {
                get {
                    return this.columnDateRepairOrdered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow this[int index] {
                get {
                    return ((GARepairIssueViewRow)(this.Rows[index]));
                }
            }
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowChanging;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowChanged;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowDeleting;
            
            public event GARepairIssueViewRowChangeEventHandler GARepairIssueViewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGARepairIssueViewRow(GARepairIssueViewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow AddGARepairIssueViewRow(
                        string RepairIssueViewReferenceId, 
                        string EquipmentId, 
                        int RequestedBy, 
                        System.DateTime DateOfFailure, 
                        string RepairsNeeded, 
                        int Status, 
                        int Responsible, 
                        int ResponsibleRoleListsRowId, 
                        System.DateTime DateRepairCompleted, 
                        string LessonsLearned, 
                        string nTextFree2, 
                        string nTextFree3, 
                        int TypeOfEquipment, 
                        int TypeOfIssue, 
                        int IntFree3, 
                        System.DateTime DateRepairBy, 
                        System.DateTime DatePlannedRepair, 
                        string EquipmentSupplier, 
                        string RepairedBy, 
                        string TextFree3, 
                        bool SwitchFree1, 
                        bool SwitchFree2, 
                        bool SwitchFree3, 
                        System.DateTime DateRepairOrdered) {
                GARepairIssueViewRow rowGARepairIssueViewRow = ((GARepairIssueViewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RepairIssueViewReferenceId,
                        EquipmentId,
                        RequestedBy,
                        DateOfFailure,
                        RepairsNeeded,
                        Status,
                        Responsible,
                        ResponsibleRoleListsRowId,
                        DateRepairCompleted,
                        LessonsLearned,
                        nTextFree2,
                        nTextFree3,
                        TypeOfEquipment,
                        TypeOfIssue,
                        IntFree3,
                        DateRepairBy,
                        DatePlannedRepair,
                        EquipmentSupplier,
                        RepairedBy,
                        TextFree3,
                        SwitchFree1,
                        SwitchFree2,
                        SwitchFree3,
                        DateRepairOrdered};
                rowGARepairIssueViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGARepairIssueViewRow);
                return rowGARepairIssueViewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow FindByRepairIssueViewRowId(int RepairIssueViewRowId) {
                return ((GARepairIssueViewRow)(this.Rows.Find(new object[] {
                            RepairIssueViewRowId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GARepairIssueViewDataTable cln = ((GARepairIssueViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GARepairIssueViewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRepairIssueViewRowId = base.Columns["RepairIssueViewRowId"];
                this.columnRepairIssueViewReferenceId = base.Columns["RepairIssueViewReferenceId"];
                this.columnEquipmentId = base.Columns["EquipmentId"];
                this.columnRequestedBy = base.Columns["RequestedBy"];
                this.columnDateOfFailure = base.Columns["DateOfFailure"];
                this.columnRepairsNeeded = base.Columns["RepairsNeeded"];
                this.columnStatus = base.Columns["Status"];
                this.columnResponsible = base.Columns["Responsible"];
                this.columnResponsibleRoleListsRowId = base.Columns["ResponsibleRoleListsRowId"];
                this.columnDateRepairCompleted = base.Columns["DateRepairCompleted"];
                this.columnLessonsLearned = base.Columns["LessonsLearned"];
                this.columnnTextFree2 = base.Columns["nTextFree2"];
                this.columnnTextFree3 = base.Columns["nTextFree3"];
                this.columnTypeOfEquipment = base.Columns["TypeOfEquipment"];
                this.columnTypeOfIssue = base.Columns["TypeOfIssue"];
                this.columnIntFree3 = base.Columns["IntFree3"];
                this.columnDateRepairBy = base.Columns["DateRepairBy"];
                this.columnDatePlannedRepair = base.Columns["DatePlannedRepair"];
                this.columnEquipmentSupplier = base.Columns["EquipmentSupplier"];
                this.columnRepairedBy = base.Columns["RepairedBy"];
                this.columnTextFree3 = base.Columns["TextFree3"];
                this.columnSwitchFree1 = base.Columns["SwitchFree1"];
                this.columnSwitchFree2 = base.Columns["SwitchFree2"];
                this.columnSwitchFree3 = base.Columns["SwitchFree3"];
                this.columnDateRepairOrdered = base.Columns["DateRepairOrdered"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRepairIssueViewRowId = new global::System.Data.DataColumn("RepairIssueViewRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairIssueViewRowId);
                this.columnRepairIssueViewReferenceId = new global::System.Data.DataColumn("RepairIssueViewReferenceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairIssueViewReferenceId);
                this.columnEquipmentId = new global::System.Data.DataColumn("EquipmentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentId);
                this.columnRequestedBy = new global::System.Data.DataColumn("RequestedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedBy);
                this.columnDateOfFailure = new global::System.Data.DataColumn("DateOfFailure", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfFailure);
                this.columnRepairsNeeded = new global::System.Data.DataColumn("RepairsNeeded", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairsNeeded);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnResponsible = new global::System.Data.DataColumn("Responsible", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsible);
                this.columnResponsibleRoleListsRowId = new global::System.Data.DataColumn("ResponsibleRoleListsRowId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponsibleRoleListsRowId);
                this.columnDateRepairCompleted = new global::System.Data.DataColumn("DateRepairCompleted", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairCompleted);
                this.columnLessonsLearned = new global::System.Data.DataColumn("LessonsLearned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLessonsLearned);
                this.columnnTextFree2 = new global::System.Data.DataColumn("nTextFree2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree2);
                this.columnnTextFree3 = new global::System.Data.DataColumn("nTextFree3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnTextFree3);
                this.columnTypeOfEquipment = new global::System.Data.DataColumn("TypeOfEquipment", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfEquipment);
                this.columnTypeOfIssue = new global::System.Data.DataColumn("TypeOfIssue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfIssue);
                this.columnIntFree3 = new global::System.Data.DataColumn("IntFree3", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntFree3);
                this.columnDateRepairBy = new global::System.Data.DataColumn("DateRepairBy", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairBy);
                this.columnDatePlannedRepair = new global::System.Data.DataColumn("DatePlannedRepair", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatePlannedRepair);
                this.columnEquipmentSupplier = new global::System.Data.DataColumn("EquipmentSupplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipmentSupplier);
                this.columnRepairedBy = new global::System.Data.DataColumn("RepairedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepairedBy);
                this.columnTextFree3 = new global::System.Data.DataColumn("TextFree3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextFree3);
                this.columnSwitchFree1 = new global::System.Data.DataColumn("SwitchFree1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree1);
                this.columnSwitchFree2 = new global::System.Data.DataColumn("SwitchFree2", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree2);
                this.columnSwitchFree3 = new global::System.Data.DataColumn("SwitchFree3", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSwitchFree3);
                this.columnDateRepairOrdered = new global::System.Data.DataColumn("DateRepairOrdered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRepairOrdered);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRepairIssueViewRowId}, true));
                this.columnRepairIssueViewRowId.AutoIncrement = true;
                this.columnRepairIssueViewRowId.AllowDBNull = false;
                this.columnRepairIssueViewRowId.ReadOnly = true;
                this.columnRepairIssueViewRowId.Unique = true;
                this.columnRepairIssueViewReferenceId.MaxLength = 50;
                this.columnEquipmentId.MaxLength = 200;
                this.columnRepairsNeeded.MaxLength = 1073741823;
                this.columnLessonsLearned.MaxLength = 1073741823;
                this.columnnTextFree2.MaxLength = 1073741823;
                this.columnnTextFree3.MaxLength = 1073741823;
                this.columnEquipmentSupplier.MaxLength = 200;
                this.columnRepairedBy.MaxLength = 200;
                this.columnTextFree3.MaxLength = 200;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow NewGARepairIssueViewRow() {
                return ((GARepairIssueViewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GARepairIssueViewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GARepairIssueViewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GARepairIssueViewRowChanged != null)) {
                    this.GARepairIssueViewRowChanged(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GARepairIssueViewRowChanging != null)) {
                    this.GARepairIssueViewRowChanging(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GARepairIssueViewRowDeleted != null)) {
                    this.GARepairIssueViewRowDeleted(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GARepairIssueViewRowDeleting != null)) {
                    this.GARepairIssueViewRowDeleting(this, new GARepairIssueViewRowChangeEvent(((GARepairIssueViewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGARepairIssueViewRow(GARepairIssueViewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                RepairIssueViewDS ds = new RepairIssueViewDS();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GARepairIssueViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GARepairIssueViewRow : global::System.Data.DataRow {
            
            private GARepairIssueViewDataTable tableGARepairIssueView;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GARepairIssueViewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGARepairIssueView = ((GARepairIssueViewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RepairIssueViewRowId {
                get {
                    return ((int)(this[this.tableGARepairIssueView.RepairIssueViewRowIdColumn]));
                }
                set {
                    this[this.tableGARepairIssueView.RepairIssueViewRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairIssueViewReferenceId {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RepairIssueViewReferenceId\' in table \'GARepairIssueView\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentId {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.EquipmentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentId\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.EquipmentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestedBy {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.RequestedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestedBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RequestedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfFailure {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGARepairIssueView.DateOfFailureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOfFailure\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateOfFailureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairsNeeded {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairsNeededColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RepairsNeeded\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairsNeededColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Responsible {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.ResponsibleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Responsible\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.ResponsibleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResponsibleRoleListsRowId {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResponsibleRoleListsRowId\' in table \'GARepairIssueView\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairCompleted {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGARepairIssueView.DateRepairCompletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRepairCompleted\' in table \'GARepairIssueView\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairCompletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LessonsLearned {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.LessonsLearnedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LessonsLearned\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.LessonsLearnedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree2 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.nTextFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nTextFree2\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.nTextFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nTextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.nTextFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nTextFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.nTextFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfEquipment {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.TypeOfEquipmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfEquipment\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TypeOfEquipmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TypeOfIssue {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.TypeOfIssueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfIssue\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TypeOfIssueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IntFree3 {
                get {
                    try {
                        return ((int)(this[this.tableGARepairIssueView.IntFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.IntFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairBy {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGARepairIssueView.DateRepairByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRepairBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DatePlannedRepair {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGARepairIssueView.DatePlannedRepairColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DatePlannedRepair\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DatePlannedRepairColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EquipmentSupplier {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.EquipmentSupplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EquipmentSupplier\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.EquipmentSupplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RepairedBy {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.RepairedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RepairedBy\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.RepairedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextFree3 {
                get {
                    try {
                        return ((string)(this[this.tableGARepairIssueView.TextFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.TextFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree1 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree1\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree2 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree2\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SwitchFree3 {
                get {
                    try {
                        return ((bool)(this[this.tableGARepairIssueView.SwitchFree3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SwitchFree3\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.SwitchFree3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateRepairOrdered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableGARepairIssueView.DateRepairOrderedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRepairOrdered\' in table \'GARepairIssueView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGARepairIssueView.DateRepairOrderedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairIssueViewReferenceIdNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairIssueViewReferenceIdNull() {
                this[this.tableGARepairIssueView.RepairIssueViewReferenceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentIdNull() {
                return this.IsNull(this.tableGARepairIssueView.EquipmentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentIdNull() {
                this[this.tableGARepairIssueView.EquipmentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestedByNull() {
                return this.IsNull(this.tableGARepairIssueView.RequestedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestedByNull() {
                this[this.tableGARepairIssueView.RequestedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOfFailureNull() {
                return this.IsNull(this.tableGARepairIssueView.DateOfFailureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOfFailureNull() {
                this[this.tableGARepairIssueView.DateOfFailureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairsNeededNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairsNeededColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairsNeededNull() {
                this[this.tableGARepairIssueView.RepairsNeededColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableGARepairIssueView.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableGARepairIssueView.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibleNull() {
                return this.IsNull(this.tableGARepairIssueView.ResponsibleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibleNull() {
                this[this.tableGARepairIssueView.ResponsibleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResponsibleRoleListsRowIdNull() {
                return this.IsNull(this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResponsibleRoleListsRowIdNull() {
                this[this.tableGARepairIssueView.ResponsibleRoleListsRowIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairCompletedNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairCompletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairCompletedNull() {
                this[this.tableGARepairIssueView.DateRepairCompletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLessonsLearnedNull() {
                return this.IsNull(this.tableGARepairIssueView.LessonsLearnedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLessonsLearnedNull() {
                this[this.tableGARepairIssueView.LessonsLearnedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree2Null() {
                return this.IsNull(this.tableGARepairIssueView.nTextFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree2Null() {
                this[this.tableGARepairIssueView.nTextFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnTextFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.nTextFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnTextFree3Null() {
                this[this.tableGARepairIssueView.nTextFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfEquipmentNull() {
                return this.IsNull(this.tableGARepairIssueView.TypeOfEquipmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfEquipmentNull() {
                this[this.tableGARepairIssueView.TypeOfEquipmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfIssueNull() {
                return this.IsNull(this.tableGARepairIssueView.TypeOfIssueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfIssueNull() {
                this[this.tableGARepairIssueView.TypeOfIssueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.IntFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntFree3Null() {
                this[this.tableGARepairIssueView.IntFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairByNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairByNull() {
                this[this.tableGARepairIssueView.DateRepairByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatePlannedRepairNull() {
                return this.IsNull(this.tableGARepairIssueView.DatePlannedRepairColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatePlannedRepairNull() {
                this[this.tableGARepairIssueView.DatePlannedRepairColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentSupplierNull() {
                return this.IsNull(this.tableGARepairIssueView.EquipmentSupplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentSupplierNull() {
                this[this.tableGARepairIssueView.EquipmentSupplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRepairedByNull() {
                return this.IsNull(this.tableGARepairIssueView.RepairedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRepairedByNull() {
                this[this.tableGARepairIssueView.RepairedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.TextFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextFree3Null() {
                this[this.tableGARepairIssueView.TextFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree1Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree1Null() {
                this[this.tableGARepairIssueView.SwitchFree1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree2Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree2Null() {
                this[this.tableGARepairIssueView.SwitchFree2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSwitchFree3Null() {
                return this.IsNull(this.tableGARepairIssueView.SwitchFree3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSwitchFree3Null() {
                this[this.tableGARepairIssueView.SwitchFree3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRepairOrderedNull() {
                return this.IsNull(this.tableGARepairIssueView.DateRepairOrderedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRepairOrderedNull() {
                this[this.tableGARepairIssueView.DateRepairOrderedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GARepairIssueViewRowChangeEvent : global::System.EventArgs {
            
            private GARepairIssueViewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRowChangeEvent(GARepairIssueViewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GARepairIssueViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591